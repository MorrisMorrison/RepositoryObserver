{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/abonement/abonement.component.css","webpack:///./src/app/abonement/abonement.component.html","webpack:///./src/app/abonement/abonement.component.ts","webpack:///./src/app/add-notification/add-notification.component.css","webpack:///./src/app/add-notification/add-notification.component.html","webpack:///./src/app/add-notification/add-notification.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/dto/notificationTO.ts","webpack:///./src/app/dto/repositoryTO.ts","webpack:///./src/app/edit-notification/edit-notification.component.css","webpack:///./src/app/edit-notification/edit-notification.component.html","webpack:///./src/app/edit-notification/edit-notification.component.ts","webpack:///./src/app/footer/footer.component.css","webpack:///./src/app/footer/footer.component.html","webpack:///./src/app/footer/footer.component.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/model/notification-model.ts","webpack:///./src/app/nav-menu/nav-menu.component.css","webpack:///./src/app/nav-menu/nav-menu.component.html","webpack:///./src/app/nav-menu/nav-menu.component.ts","webpack:///./src/app/notifications/notifications.component.css","webpack:///./src/app/notifications/notifications.component.html","webpack:///./src/app/notifications/notifications.component.ts","webpack:///./src/app/service/alertify/alertify.service.ts","webpack:///./src/app/service/githubauth/githubauth.service.ts","webpack:///./src/app/service/payment/payment.service.ts","webpack:///./src/app/service/taskscheduler/taskscheduler.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".abonementMain{\\r\\n    padding-bottom: 10px;\\r\\n}\"","module.exports = \"<div class=\\\"abonementMain\\\">\\n  <div class=\\\"container\\\">\\n    <div style=\\\"padding-bottom:10px\\\">\\n      <h2 >Abonements</h2>\\n      <p>All provided Abonements are just simple PayPal donations to learn interacting with the PayPal API.</p>\\n    </div>\\n    <div class=\\\"card-deck mb-3 text-center\\\">\\n      <div class=\\\"card mb-4 shadow-sm\\\">\\n        <div class=\\\"card-header\\\">\\n          <h4 class=\\\"my-0 font-weight-normal\\\">Free</h4>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <h1 class=\\\"card-title pricing-card-title\\\">$0 <small class=\\\"text-muted\\\">/ mo</small></h1>\\n          <ul class=\\\"list-unstyled mt-3 mb-4\\\">\\n            <li>1 user only</li>\\n            <li>1 notification per frequency</li>\\n            <li>Email support</li>\\n          </ul>\\n          <button type=\\\"button\\\" class=\\\"btn btn-lg btn-block btn-outline-primary\\\" (click)=\\\"login()\\\">Sign up for free</button>\\n        </div>\\n      </div>\\n      <div class=\\\"card mb-4 shadow-sm\\\">\\n        <div class=\\\"card-header\\\">\\n          <h4 class=\\\"my-0 font-weight-normal\\\">Pro</h4>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <h1 class=\\\"card-title pricing-card-title\\\">$1 <small class=\\\"text-muted\\\">/ mo</small></h1>\\n          <ul class=\\\"list-unstyled mt-3 mb-4\\\">\\n            <li>3 users included</li>\\n            <li>2 notifications per frequency</li>\\n            <li>Priority email support</li>\\n            <li>Help center access</li>\\n          </ul>\\n          <button type=\\\"button\\\" class=\\\"btn btn-lg btn-block btn-primary\\\" (click)=\\\"createProAbo()\\\">Get started</button>\\n        </div>\\n      </div>\\n      <div class=\\\"card mb-4 shadow-sm\\\">\\n        <div class=\\\"card-header\\\">\\n          <h4 class=\\\"my-0 font-weight-normal\\\">Enterprise</h4>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <h1 class=\\\"card-title pricing-card-title\\\">$2 <small class=\\\"text-muted\\\">/ mo</small></h1>\\n          <ul class=\\\"list-unstyled mt-3 mb-4\\\">\\n            <li>unlimited users</li>\\n            <li>unlimited notifications</li>\\n            <li>Phone and email support</li>\\n            <li>Help center access</li>\\n          </ul>\\n          <button type=\\\"button\\\" class=\\\"btn btn-lg btn-block btn-primary\\\" (click)=\\\"createBusinessAbo()\\\">Contact us</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\nimport { DOCUMENT } from \"@angular/common\";\nimport { AlertifyService } from '../service/alertify/alertify.service';\nimport { PaymentService } from '../service/payment/payment.service';\n\n@Component({\n  selector: 'app-abonement',\n  templateUrl: './abonement.component.html',\n  styleUrls: ['./abonement.component.css']\n})\nexport class AbonementComponent implements OnInit {\n\n  private proAboPrice: number = 1;\n  private businessAboPrice: number = 2;\n\n  constructor(private githubAuthService: GithubauthService,\n    @Inject(DOCUMENT) private document: any,\n    private alertifyService: AlertifyService,\n    private paymentService: PaymentService) { }\n\n  ngOnInit() {\n  }\n\n  login() {\n    this.githubAuthService.login().subscribe(response => {\n      this.document.location.href = response.url;\n      this.alertifyService.success(\"Logged in.\");\n    });\n  }\n\n  createProAbo(){\n    this.createPayment(this.proAboPrice);\n  }\n\n  createBusinessAbo(){\n    this.createPayment(this.businessAboPrice);\n  }\n\n  createPayment(amount: number) {\n    this.paymentService.createPayment(amount).subscribe(redirectUrl => {\n      this.document.location.href = redirectUrl;\n    });\n  }\n}\n","module.exports = \".addNotificationMain{\\r\\n    padding-bottom: 10px;\\r\\n}\"","module.exports = \"<div class=\\\"addNotificationMain\\\" *ngIf=\\\"isAuthenticated\\\">\\n  <div class=\\\"card text-white bg-primary mb-3\\\">\\n    <div class=\\\"card-body\\\">\\n      <h2 class=\\\"card-title\\\">Notify me!</h2>\\n      <p>To get notified when a password is found in one of your specified repositories simply subscribe with your\\n        email down below.</p>\\n      <!-- <div *ngIf=\\\"success\\\" class=\\\"alert alert-success\\\" role=\\\"alert\\\">\\n        Your notification has successfully been created.\\n      </div>\\n      <div *ngIf=\\\"alreadyCreated\\\" class=\\\"alert alert-warning\\\" role=\\\"alert\\\">\\n        You already created a notification for this frequency.\\n      </div>\\n      <div *ngIf=\\\"formIsInvalid\\\" class=\\\"alert alert-warning\\\" role=\\\"alert\\\">\\n        The information you provided are invalid. Please check again.\\n      </div> -->\\n      <form name=\\\"notificationForm\\\" (ngSubmit)=\\\"notificationValidator.form.valid && createNotification()\\\" #notificationValidator=\\\"ngForm\\\">\\n        <!-- <h5 class=\\\"card-subtitle\\\">Enter your Email:</h5> -->\\n        <!-- <div class=\\\"form-group\\\"> -->\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col\\\">\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"email\\\"><b>Email address</b></label>\\n              <input class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" type=\\\"email\\\" [(ngModel)]=\\\"notificationModel.email\\\"\\n                #emailValidatior=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': notificationValidator.submitted && emailValidation?.invalid }\\\"\\n                aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Enter email\\\" required email>\\n              <div *ngIf=\\\"notificationValidator.submitted && emailValidatior.invalid\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"emailValidatior?.errors.required\\\">Email is required</div>\\n                <div *ngIf=\\\"emailValidatior?.errors.email\\\">Email must be a valid email address</div>\\n              </div>\\n              <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">We'll never share your email with anyone else.\\n              </small>\\n            </div>\\n          </div>\\n          <div class=\\\"col\\\">\\n            <label for=\\\"frequency\\\"><b>Frequency</b></label>\\n            <select  [(ngModel)]=\\\"notificationModel.selectedFrequency\\\" class=\\\"form-control\\\" id=\\\"frequency\\\" name=\\\"frequency\\\" #frequencyValidator=\\\"ngModel\\\" [ngClass]=\\\"{ 'is-invalid': notificationValidator.submitted && frequencyValidator?.invalid }\\\" required>  \\n              <option *ngFor=\\\"let frequency of notificationModel.frequencies;\\\" [ngValue]=\\\"frequency\\\">{{frequency}}</option>\\n            </select>\\n            <div *ngIf=\\\"notificationValidator.submitted && frequencyValidator.invalid\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"frequencyValidator?.errors.required\\\">Frequency is required</div>\\n              </div>\\n            <small id=\\\"frequencyHelp\\\" class=\\\"form-text text-muted\\\">In minutes.</small>\\n          </div>\\n        </div>\\n        <!-- </div> -->\\n        <div class=\\\"row\\\" style=\\\"padding-top:2%\\\">\\n          <div class=\\\"col\\\">\\n            <!-- <h6 class=\\\"card-subtitle\\\">Add Search Keywords:</h6> -->\\n            <label for=\\\"searchKeywordToAdd\\\"><b>Add Search Keywords</b></label>\\n            <div class=\\\"input-group\\\">\\n              <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Add Search Keyword\\\" id=\\\"searchKeywordToAdd\\\"\\n                name=\\\"searchKeywordToAdd\\\" [(ngModel)]=\\\"notificationModel.searchKeywordToAdd\\\">\\n              <div class=\\\"input-group-append\\\">\\n                <button class=\\\"btn btn-success\\\" type=\\\"button\\\"\\n                  (click)=\\\"addSearchKeyword(notificationModel.searchKeywordToAdd)\\\">Add</button>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"col\\\">\\n            <!-- <h6 class=\\\"card-subtitle\\\">Common keywords:</h6> -->\\n            <label for=\\\"commonKeyword\\\"><b>Common keywords</b></label>\\n            <div *ngIf=\\\"notificationModel.commonKeywords.length > 0; else showNoKeywordsYet\\\">\\n              <span name=\\\"commonKeyword\\\" *ngFor=\\\"let commonKeyword of notificationModel.commonKeywords\\\">{{commonKeyword}}<button\\n                  class=\\\"btn\\\" style=\\\"background-color:transparent\\\" (click)=\\\"addSearchKeyword(commonKeyword)\\\"><i\\n                    class=\\\"fa fa-plus-circle\\\" style=\\\"color:white\\\"></i></button></span>\\n            </div>\\n            <ng-template #showNoKeywordsYet>\\n              <div>\\n                <p>No Keywords added yet.</p>\\n              </div>\\n            </ng-template>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\" style=\\\"padding-top: 2%\\\">\\n          <div class=\\\"col\\\">\\n            <!-- <h6 class=\\\"card-subtitle\\\">Search Keywords:</h6> -->\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"searchKeywords\\\"><b>SearchKeywords</b></label>\\n              <p *ngIf=\\\"notificationModel.searchKeywords.length == 0\\\">No Search Keywords added yet.</p>\\n              <ul name=\\\"searchKeywords\\\" id=\\\"searchKeywords\\\">\\n                <li *ngFor=\\\"let searchKeyword of notificationModel.searchKeywords\\\">{{searchKeyword}} <button class=\\\"btn\\\"\\n                    style=\\\"background-color:transparent\\\" (click)=\\\"removeSearchKeyword(searchKeyword)\\\"><i\\n                      class=\\\"fa fa-minus-circle\\\" style=\\\"color:white\\\"></i></button></li>\\n              </ul>\\n            </div>\\n          </div>\\n          <div class=\\\"col\\\">\\n            <label for=\\\"repository\\\"><b>Repositories</b></label>\\n\\n            <div class=\\\"form-group\\\">\\n              <!-- <h5 class=\\\"card-subtitle\\\">Select Repositories:</h5> -->\\n              <div style=\\\"padding-top: 5px; padding-left:4%;\\\" *ngFor=\\\"let repository of notificationModel.repositoryTos\\\"\\n                class=\\\"form-check\\\">\\n                <input type=\\\"checkbox\\\" name=\\\"repository\\\" class=\\\"form-check-input\\\" value=\\\"{{repository.name}}\\\"\\n                  [(ngModel)]=\\\"repository.selected\\\">\\n                {{repository.name}}\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Submit</button>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit, Input, OnChanges, Output, EventEmitter } from '@angular/core';\nimport { TaskschedulerService } from \"../service/taskscheduler/taskscheduler.service\";\nimport { GithubauthService } from \"../service/githubauth/githubauth.service\";\nimport { RepositoryTO } from \"../dto/repositoryTO\";\nimport { AddNotificationTO } from \"../dto/notificationTO\";\nimport { UserTO } from \"../dto/userTO\";\nimport { FormsModule, Validators } from '@angular/forms';\nimport { AlertifyService } from '../service/alertify/alertify.service';\nimport { NotificationModel } from '../model/notification-model';\n\n\n@Component({\n    selector: 'app-add-notification',\n    templateUrl: './add-notification.component.html',\n    styleUrls: ['./add-notification.component.css']\n})\nexport class AddNotificationComponent implements OnInit, OnChanges {\n\n\n    // public repositories: string[];\n    // public repositoryTos: RepositoryTO[] = [];\n    // public frequencies: number[];\n    // public selectedFrequency: number;\n    // public email: string;\n    // public searchKeywords: string[] = [];\n    // public searchKeywordToAdd: string;\n    // public commonKeywords: string[] = [];\n\n    notificationModel: NotificationModel = new NotificationModel();\n\n    formIsInvalid: boolean;\n\n    constructor(private githubAuthService: GithubauthService, private taskschedulerService: TaskschedulerService, private alertifyService: AlertifyService) { }\n\n    @Input() username: string;\n    @Input() isAuthenticated: boolean;\n    @Output() notificationCreated = new EventEmitter<boolean>();\n\n\n    ngOnInit() {\n\n    }\n\n    ngOnChanges() {\n        this.refreshData();\n    }\n\n    refreshData() {\n        if (this.isAuthenticated) {\n            this.getCurrentUserRepositories();\n            this.getFrequencies();\n            this.getCommonKeywords();\n        }\n    }\n\n\n    getCurrentUserRepositories() {\n        this.githubAuthService.getCurrentUsersRepositories().subscribe(repositories => {\n            this.notificationModel.repositories = repositories;\n            this.notificationModel.repositoryTos = [];\n            this.notificationModel.repositories.forEach(repository => this.notificationModel.repositoryTos.push(new RepositoryTO(repository, false)));\n        });\n    }\n\n    getFrequencies() {\n        this.taskschedulerService.getFrequencies().subscribe(frequencies => {\n            this.notificationModel.frequencies = frequencies;\n            this.notificationModel.selectedFrequency = this.notificationModel.frequencies[0];\n        });\n    }\n\n    getCommonKeywords() {\n        this.taskschedulerService.getCommonKeywords().subscribe(commonKeywords => this.notificationModel.commonKeywords = commonKeywords);\n    }\n\n    createNotification() {\n        let notification: AddNotificationTO = new AddNotificationTO();\n        notification.email = this.notificationModel.email;\n        notification.frequency = this.notificationModel.selectedFrequency;\n        notification.searchKeywords = this.notificationModel.searchKeywords;\n\n        let repositories: string[] = this.getSelectedRepositories();\n        notification.repositories = repositories;\n\n        this.githubAuthService.getCurrentUser().subscribe(user => {\n            notification.username = user.username;\n            this.taskschedulerService.createNotification(notification).subscribe(response => {\n                if (response.status === 201) {\n                    this.notificationCreated.emit(true);\n                    this.alertifyService.success(\"Notification created.\");\n                } else if (response.status === 409) {\n                    this.alertifyService.error(\"Notification already exists.\");\n                }\n                this.clearFormData();\n            });\n        });\n    }\n\n    checkFormIsInvalid(): boolean {\n        let formIsInvalid: boolean = (this.notificationModel.email.length < 4 || this.notificationModel.selectedFrequency == null || this.notificationModel.searchKeywords.length < 1 || this.getSelectedRepositories().length < 1);\n        if (formIsInvalid) {\n            this.formIsInvalid = true;\n            return true;\n        }\n        return false;\n    }\n\n    clearFormData() {\n        this.notificationModel.email = \"\";\n        this.notificationModel.selectedFrequency = this.notificationModel.frequencies[0];\n        this.notificationModel.repositoryTos.forEach(repository => repository.selected = false);\n        this.notificationModel.searchKeywords = [];\n    }\n\n    getSelectedRepositories(): string[] {\n        let repositories: string[] = this.notificationModel.repositoryTos.filter(repositoryTO => repositoryTO.selected)\n            .map(selectedRepository => selectedRepository.name);\n        return repositories;\n    }\n\n    addSearchKeyword(searchKeywordToAdd: string) {\n        if (this.notificationModel.searchKeywords.filter(searchKeyword => searchKeyword == searchKeywordToAdd).length < 1) {\n            this.notificationModel.searchKeywords.push(searchKeywordToAdd);\n            this.notificationModel.searchKeywordToAdd = \"\";\n        }\n    }\n\n    removeSearchKeyword(searchKeywordToDelete: string) {\n        this.notificationModel.searchKeywords = this.notificationModel.searchKeywords.filter(searchKeyword => searchKeyword != searchKeywordToDelete);\n    }\n\n}\n","module.exports = \"@media (max-width: 767px) {\\n  /* On small screens, the nav menu spans the full width of the screen. Leave a space for it. */\\n  .body-content {\\n    padding-top: 50px;\\n  }\\n\\n}\\n\\n\\n\"","module.exports = \"<router-outlet></router-outlet>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'RepositoryNotifier';\n\n  constructor(){\n    \n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, Validators  } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, ExtraOptions } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { NavMenuComponent } from './nav-menu/nav-menu.component';\nimport { HomeComponent } from './home/home.component';\nimport { NotificationsComponent } from './notifications/notifications.component';\nimport { AddNotificationComponent } from './add-notification/add-notification.component';\nimport { GithubauthService } from './service/githubauth/githubauth.service';\nimport { FooterComponent } from './footer/footer.component';\nimport { TaskschedulerService } from './service/taskscheduler/taskscheduler.service';\nimport { AlertifyService } from './service/alertify/alertify.service';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport { EditNotificationComponent } from './edit-notification/edit-notification.component';\nimport { AbonementComponent } from './abonement/abonement.component';\n\nconst config: ExtraOptions = {\n  onSameUrlNavigation: 'reload'\n};\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavMenuComponent,\n    HomeComponent,\n    NotificationsComponent,\n    AddNotificationComponent,\n    FooterComponent,\n    EditNotificationComponent,\n    AbonementComponent,\n  ],\n  exports: [],\n  entryComponents: [EditNotificationComponent],\n  imports: [\n    BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),\n    HttpClientModule,\n    FormsModule,\n    NgbModule,\n    FormsModule,\n    RouterModule.forRoot([\n      { path: '', redirectTo: 'home', pathMatch: 'full' },\n      { path: 'home', component: HomeComponent },\n      { path: 'notifications', component: NotificationsComponent },\n    ], config)\n  ],\n  providers: [GithubauthService, TaskschedulerService, AlertifyService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class AddNotificationTO{\r\n    username: string;\r\n    email: string;\r\n    repositories: string[];\r\n    frequency: number;\r\n    searchKeywords: string[];\r\n}\r\n\r\nexport class UpdateNotificationTO{\r\n    username: string;\r\n    email: string;\r\n    repositories: string[];\r\n    frequency: number;\r\n    searchKeywords: string[];\r\n}\r\n\r\nexport class GetNotificationTO extends AddNotificationTO{\r\n    id: number;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    lastExecutedAt: Date;\r\n    status: string;\r\n}\r\n\r\nexport class Notification{\r\n    getNotificationTO: GetNotificationTO;\r\n    selected: boolean;\r\n\r\n\r\n    constructor(getNotificationTO: GetNotificationTO, selected: boolean) {\r\n        this.getNotificationTO = getNotificationTO;\r\n        this.selected = selected;\r\n    }\r\n}\r\n\r\nexport class DeleteNotificationTO{\r\n    email: string;\r\n    frequency: number;\r\n}","// https://stackoverflow.com/questions/34997128/angular-2-get-values-of-multiple-checked-checkboxes\r\nexport class RepositoryTO {\r\n    name: string;\r\n    selected: boolean;\r\n\r\n    constructor(name: string, selected: boolean) {\r\n        this.name = name;\r\n        this.selected = selected;\r\n    }\r\n}\r\n\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"modal-header\\\">\\n  <h4 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\">Edit Notification</h4>\\n  <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"activeModal.dismiss('Cross click')\\\">\\n    <span aria-hidden=\\\"true\\\">&times;</span>\\n  </button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n  <form>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\"><b>Email address</b></label>\\n      <input class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" type=\\\"email\\\" [(ngModel)]=\\\"notificationModel.email\\\" aria-describedby=\\\"emailHelp\\\"\\n        placeholder=\\\"EMail\\\" value=\\\"{{notificationModel.email}}\\\">\\n      <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">We'll never share your email with anyone else.\\n      </small>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"repository\\\"><b>Repositories</b></label>\\n      <div style=\\\"padding-top: 5px; padding-left:4%;\\\" *ngFor=\\\"let repository of notificationModel.repositoryTos\\\" class=\\\"form-check\\\">\\n        <input type=\\\"checkbox\\\" name=\\\"repository\\\" class=\\\"form-check-input\\\" value=\\\"{{repository.name}}\\\"\\n          [(ngModel)]=\\\"repository.selected\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n        {{repository.name}}\\n      </div>\\n    </div>\\n    <label for=\\\"searchKeywordToAdd\\\"><b>Add Search Keywords</b></label>\\n    <div class=\\\"form-group\\\">\\n      <div class=\\\"input-group\\\">\\n        <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Add Search Keyword\\\" id=\\\"searchKeywordToAdd\\\"\\n          name=\\\"searchKeywordToAdd\\\" [(ngModel)]=\\\"notificationModel.searchKeywordToAdd\\\">\\n        <div class=\\\"input-group-append\\\">\\n          <button class=\\\"btn btn-success\\\" type=\\\"button\\\" (click)=\\\"addSearchKeyword(notificationModel.searchKeywordToAdd)\\\">Add</button>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"searchKeywords\\\"><b>SearchKeywords</b></label>\\n      <p *ngIf=\\\"notificationModel.searchKeywords.length == 0\\\">No Search Keywords added yet.</p>\\n      <ul name=\\\"searchKeywords\\\" id=\\\"searchKeywords\\\">\\n        <li *ngFor=\\\"let searchKeyword of notificationModel.searchKeywords\\\">{{searchKeyword}} <button class=\\\"btn\\\"\\n            style=\\\"background-color:transparent\\\" (click)=\\\"removeSearchKeyword(searchKeyword)\\\"><i\\n              class=\\\"fa fa-minus-circle\\\" style=\\\"color:black\\\"></i></button></li>\\n      </ul>\\n    </div>\\n    <fieldset disabled>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"frequency\\\"><b>Frequency</b></label>\\n        <select [(ngModel)]=\\\"selectedNotification.getNotificationTO.frequency\\\" class=\\\"form-control\\\" id=\\\"frequency\\\"\\n          name=\\\"frequency\\\">\\n          <option *ngFor=\\\"let frequency of notificationModel.frequencies;\\\" [ngValue]=\\\"frequency\\\">{{frequency}}</option>\\n        </select>\\n        <small id=\\\"frequencyHelp\\\" class=\\\"form-text text-muted\\\">In minutes.</small>\\n      </div>\\n    </fieldset>\\n  </form>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n  <button type=\\\"button\\\" class=\\\"btn btn-outline-dark\\\" (click)=\\\"saveNotification()\\\">Save</button>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { RepositoryTO } from '../dto/repositoryTO';\nimport { NgbModalRef, NgbModal, NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { GetNotificationTO, Notification, AddNotificationTO } from \"../dto/notificationTO\";\nimport { TaskschedulerService } from '../service/taskscheduler/taskscheduler.service';\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\nimport { AlertifyService } from '../service/alertify/alertify.service';\nimport { NotificationModel } from '../model/notification-model';\n\n\n@Component({\n  selector: 'app-edit-notification',\n  templateUrl: './edit-notification.component.html',\n  styleUrls: ['./edit-notification.component.css']\n})\nexport class EditNotificationComponent implements OnInit {\n\n  @Input() selectedNotification: Notification;\n  @Input() username: string;\n\n  notificationModel: NotificationModel = new NotificationModel();\n\n  constructor(private taskSchedulerService: TaskschedulerService,\n    private githubAuthService: GithubauthService,\n    private alertifyService: AlertifyService,\n    public activeModal: NgbActiveModal) { }\n\n  ngOnInit() {\n    this.getCurrentUserRepositories();\n    this.getFrequencies();\n    this.getCommonKeywords();\n    this.selectedNotification.getNotificationTO.searchKeywords.forEach(searchKeyword => this.notificationModel.searchKeywords.push(searchKeyword))\n    this.notificationModel.email = this.selectedNotification.getNotificationTO.email;\n  }\n\n  getCurrentUserRepositories() {\n    this.githubAuthService.getCurrentUsersRepositories().subscribe(repositories => {\n      this.notificationModel.repositoryTos = [];\n      repositories.forEach(repository => {\n        if (this.selectedNotification.getNotificationTO.repositories.some(x => x === repository)) {\n          this.notificationModel.repositoryTos.push(new RepositoryTO(repository, true));\n        } else {\n          this.notificationModel.repositoryTos.push(new RepositoryTO(repository, false));\n        }\n      });\n    });\n  }\n\n  uncheckUserRepositories() {\n    this.notificationModel.repositoryTos.forEach(repository => {\n      repository.selected = false;\n    });\n  }\n\n  getFrequencies() {\n    this.taskSchedulerService.getFrequencies().subscribe(frequencies => {\n      this.notificationModel.frequencies = frequencies;\n      this.notificationModel.selectedFrequency = this.notificationModel.frequencies[0];\n    });\n  }\n\n  getCommonKeywords() {\n    this.taskSchedulerService.getCommonKeywords().subscribe(commonKeywords => this.notificationModel.commonKeywords = commonKeywords);\n  }\n\n  addSearchKeyword(searchKeywordToAdd: string) {\n    if (this.notificationModel.searchKeywords.filter(searchKeyword => searchKeyword == searchKeywordToAdd).length < 1) {\n      this.notificationModel.searchKeywords.push(searchKeywordToAdd);\n      this.notificationModel.searchKeywordToAdd = \"\";\n    }\n  }\n\n  removeSearchKeyword(searchKeywordToDelete: string) {\n    this.notificationModel.searchKeywords = this.notificationModel.searchKeywords.filter(searchKeyword => searchKeyword != searchKeywordToDelete);\n  }\n\n  saveNotification() {\n    this.alertifyService.confirm(\"Save Changes?\", \"Do you want to save the changes you made to your notification?\", () => {\n\n      let notification: AddNotificationTO = new AddNotificationTO();\n      notification.email = this.notificationModel.email;\n      notification.username = this.username;\n      notification.searchKeywords = this.notificationModel.searchKeywords;\n      notification.frequency = this.selectedNotification.getNotificationTO.frequency;\n      notification.repositories = this.getSelectedRepositories();\n\n      this.taskSchedulerService.updateNotification(notification).subscribe(result => {\n        this.alertifyService.success(\"Notification updated.\");\n\n        this.selectedNotification.getNotificationTO.repositories = notification.repositories;\n        this.selectedNotification.getNotificationTO.email = notification.email;\n        this.selectedNotification.getNotificationTO.searchKeywords = notification.searchKeywords;\n\n        this.activeModal.close();\n      });\n\n    });\n  }\n  getSelectedRepositories(): string[] {\n    let selectedRepositories: string[] = [];\n    selectedRepositories = this.notificationModel.repositoryTos.filter(repository => repository.selected === true).map(repository => repository.name);\n    return selectedRepositories;\n  }\n\n}\n","module.exports = \".footer {\\r\\n    position: absolute;\\r\\n    bottom: 0;\\r\\n    width: 100%;\\r\\n    /* Set the fixed height of the footer here */\\r\\n    height: 60px;\\r\\n    line-height: 60px; /* Vertically center the text there */\\r\\n  }\"","module.exports = \"<footer class=\\\"footer bg-primary text-white\\\">\\n  <div class=\\\"container\\\">\\n    <a href=\\\"#\\\" style=\\\"margin-left:1%;\\\">Help</a>\\n  </div>\\n</footer>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".homeMain{\\r\\n    padding-top: 20px;\\r\\n    padding-bottom: 20px;\\r\\n}\\r\\n.region{\\r\\n    padding-top: 10px;\\r\\n    padding-bottom: 10px;\\r\\n}\\r\\n.rnCard{\\r\\n    background-color: #c9c9c9;\\r\\n  }\"","module.exports = \"<app-nav-menu [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-nav-menu>\\n<div class=\\\"container homeMain\\\">\\n    <div class=\\\"jumbotron bg-primary text-white\\\">\\n        <h1 class=\\\"display-4\\\" *ngIf=\\\"isAuthenticated; else showNotAnonymousGreeting\\\">Hello, {{username}}!</h1>\\n        <ng-template #showNotAnonymousGreeting>\\n            <h1>Hello, there!</h1>\\n        </ng-template>\\n        <p class=\\\"lead\\\">Welcome to RepositoryObserver, a simple service to observe your repositories.</p>\\n        <hr class=\\\"my-4\\\">\\n        <p>RepositoryObserver was built using:</p>\\n        <ul>\\n            <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a\\n                    href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side\\n                code\\n            </li>\\n            <li><a href='https://angular.io/'>Angular</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a>\\n                for\\n                client-side code\\n            </li>\\n            <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\\n            <li><a href='http://font-awesome.com/'>Font Awesome</a> for icons</li>\\n        </ul>\\n    </div>\\n    <div class=\\\"region\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-sm-6\\\">\\n                <div class=\\\"card text-white bg-success mb-3 h-100\\\" >\\n                    <div class=\\\"card-body\\\">\\n                        <h2 class=\\\"card-title\\\">RepositoryObserver</h2>\\n                        <p class=\\\"card-text\\\">\\n                            <strong>RepositoryObserver</strong> offers a service to observe your\\n                            <code>repositories</code> for\\n                            accidentally leaked <code>passwords</code>.<br>\\n                            Simply authenticate with your Github account and select the <code>repositories</code> you\\n                            want to be\\n                            observed.<br>\\n                            You can also select a frequency at which the scans are started:\\n                        </p>\\n                        <ul>\\n                            <li>15 minutes</li>\\n                            <li>30 minutes</li>\\n                            <li>1 hour</li>\\n                            <li>3 hours</li>\\n                            <li>12 hours</li>\\n                            <li>1 day</li>\\n                        </ul>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-sm-6\\\">\\n                <div class=\\\"card text-white bg-primary mb-3 h-100\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <h2 class=\\\"card-title\\\">Inspect SourceCode</h2>\\n                        <p class=\\\"card-text\\\">This project is open source and its source code can be reviewed <a\\n                                href=\\\"https://github.com/MorrisMorrison/scrapi\\\">here</a></p>\\n                        <p>The Application stores only the username and repository names and accesses them through\\n                            Github's public API.\\n                        </p>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n    </div>\\n\\n    <div *ngIf=\\\"isAuthenticated\\\" class=\\\"region\\\">\\n            <app-abonement></app-abonement>\\n        </div>\\n    \\n\\n    <div class=\\\"region\\\">\\n        <app-add-notification [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-add-notification>\\n    </div>\\n\\n\\n    <div *ngIf=\\\"!isAuthenticated\\\">\\n        <h2>Sign Up</h2>\\n        <p>\\n            By signing up you will be redirected to Github and you need to authenticate with your credentials.\\n        </p>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"login()\\\"><i class=\\\"fa fa-github\\\"></i> Sign Up</button>\\n    </div>\\n</div>\\n<app-footer>\"","import { Component, Inject, ViewChild } from '@angular/core';\nimport { GithubauthService } from \"../service/githubauth/githubauth.service\";\nimport { Router } from '@angular/router';\nimport { DOCUMENT } from \"@angular/common\";\nimport { TaskschedulerService } from \"../service/taskscheduler/taskscheduler.service\";\nimport { AddNotificationComponent } from '../add-notification/add-notification.component';\nimport { NavMenuComponent } from '../nav-menu/nav-menu.component';\nimport { AlertifyService } from '../service/alertify/alertify.service';\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n\n    @ViewChild(NavMenuComponent) navMenuComponent: NavMenuComponent;\n    @ViewChild(AddNotificationComponent) addNotificationComponent: AddNotificationComponent;\n\n    isAuthenticated: boolean;\n    username: string;\n\n    constructor(private githubAuthService: GithubauthService, @Inject(DOCUMENT) private document: any, private alertifyService:AlertifyService) {\n    }\n\n    ngOnInit() {\n        this.loggedIn();\n    }\n\n    loggedIn() {\n        this.githubAuthService.isAuthenticated().subscribe(response => {\n            if (response.status == 200) {\n                this.isAuthenticated = true;\n                this.githubAuthService.getCurrentUser().subscribe(username => {\n                    this.username = username.username\n                });\n            }\n        });\n    }\n\n    login() {\n        this.githubAuthService.login().subscribe(response => {\n            this.document.location.href = response.url;\n            this.alertifyService.success(\"Logged in.\");\n        });\n    }\n}\n\n","import { RepositoryTO } from \"../dto/repositoryTO\";\r\n\r\nexport class NotificationModel{\r\n    public email: string;\r\n    public repositories: string[] = [];\r\n    public repositoryTos: RepositoryTO[] = [];\r\n    public frequencies: number[] = [];\r\n    public selectedFrequency: number;\r\n    public commonKeywords: string[] = [];\r\n    public searchKeywords: string[] = [];\r\n    public searchKeywordToAdd: string;\r\n\r\n    constructor(){\r\n\r\n    }\r\n}","module.exports = \"a.navbar-brand {\\n  white-space: normal;\\n  text-align: center;\\n  word-break: break-all;\\n}\\n\\nhtml {\\n  font-size: 14px;\\n}\\n\\n@media (min-width: 768px) {\\n  html {\\n    font-size: 16px;\\n  }\\n}\\n\\n.box-shadow {\\n  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);\\n}\\n\"","module.exports = \"<header>\\n  <nav class='navbar navbar-expand-sm navbar-toggleable-sm bg-primary box-shadow mb-3'>\\n    <div class=\\\"container\\\">\\n      <a class=\\\"navbar-brand text-white\\\" [routerLink]='[\\\"/\\\"]'><i class=\\\"fa fa-search\\\"></i> RepositoryObserver</a>\\n      <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse\\\" aria-label=\\\"Toggle navigation\\\"\\n        [attr.aria-expanded]=\\\"isExpanded\\\" (click)=\\\"toggle()\\\">\\n        <span class=\\\"navbar-toggler-icon\\\"></span>\\n      </button>\\n      <div class=\\\"navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse\\\" [ngClass]='{\\\"show\\\": isExpanded}'>\\n        <ul class=\\\"navbar-nav flex-grow\\\">\\n          <li class=\\\"nav-item\\\" [routerLinkActive]='[\\\"link-active\\\"]' [routerLinkActiveOptions]='{ exact: true }'>\\n            <a class=\\\"nav-link text-white\\\" [routerLink]='[\\\"/\\\"]'><i class=\\\"fa fa-home\\\"></i> Home</a>\\n          </li>\\n          <li *ngIf=\\\"isAuthenticated\\\" class=\\\"nav-item\\\" [routerLinkActive]='[\\\"link-active\\\"]'>\\n            <a class=\\\"nav-link text-white\\\" [routerLink]='[\\\"/notifications\\\"]'><i class=\\\"fa fa-th-list\\\"></i> My Notifications</a>\\n          </li>\\n          <li *ngIf=\\\"isAuthenticated\\\" class=\\\"nav-item\\\">\\n            <a class=\\\"nav-link text-white\\\" [routerLink]='[\\\"/fetch-data\\\"]'><i class=\\\"fa fa-github\\\"></i> Hello {{username}}</a>\\n          </li>\\n          <li *ngIf=\\\"isAuthenticated\\\" class=\\\"nav-item\\\">\\n            <button class=\\\"btn btn-link\\\" (click)=\\\"logout()\\\"><i class=\\\"fa fa-sign-out\\\"></i> Logout</button>\\n          </li>\\n          <li *ngIf=\\\"!isAuthenticated\\\" class=\\\"nav-item\\\">\\n            <button class=\\\"btn btn-link\\\" (click)=\\\"login()\\\"><i class=\\\"fa fa-github\\\"></i> Sign In</button>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </nav>\\n</header>\\n\\n\"","import { Component, Input, Inject } from '@angular/core';\nimport { GithubauthService } from \"../service/githubauth/githubauth.service\";\nimport { UserTO } from \"../dto/userTO\";\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { AlertifyService } from '../service/alertify/alertify.service';\nimport { Messages } from '../messages';\n\n@Component({\n  selector: 'app-nav-menu',\n  templateUrl: './nav-menu.component.html',\n  styleUrls: ['./nav-menu.component.css']\n})\nexport class NavMenuComponent {\n\n  isExpanded = false;\n\n  constructor(private githubAuthService: GithubauthService, @Inject(DOCUMENT) private document: any, private router: Router, private alertifyService: AlertifyService) {\n  }\n  @Input() isAuthenticated: boolean;\n  @Input() username: string;\n\n  ngOnInit() {\n    this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n  }\n\n\n  collapse() {\n    this.isExpanded = false;\n  }\n\n  toggle() {\n    this.isExpanded = !this.isExpanded;\n  }\n\n  logout() {\n    this.githubAuthService.logout().subscribe(response => {\n      this.router.navigate(['home']);\n      this.alertifyService.success(\"Logged out.\");\n    });\n  }\n\n\n}\n","module.exports = \".notificationsMain{\\r\\n    padding-top: 10px;\\r\\n    padding-bottom: 20px;\\r\\n}\\r\\n.region{\\r\\n    padding-top: 30px;\\r\\n    padding-bottom: 10px;\\r\\n}\"","module.exports = \"<app-nav-menu [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-nav-menu>\\n<div class=\\\"container notificationsMain\\\">\\n    <div class=\\\"card text-white bg-primary\\\">\\n        <div class=\\\"card-body\\\">\\n            <h1 class=\\\"card-title\\\" style=\\\"padding-top:10px; padding-bottom:10px;\\\">My Notifications:</h1>\\n            <p class=\\\"card-text\\\">You can only have only NotificationTask per Frequency, so your maximum number of tasks\\n                equals the maximum number\\n                of\\n                frequencies available.</p>\\n            <div *ngIf=\\\"notifications.length < 1\\\">\\n                <p class=\\\"text-info\\\">You haven't created any notifications yet.</p>\\n            </div>\\n            <div *ngIf=\\\"notifications.length > 0\\\">\\n                <table class=\\\"table table-striped\\\">\\n                    <thead class=\\\"thead table-success\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">Select</th>\\n                            <th scope=\\\"col\\\">#</th>\\n                            <th scope=\\\"col\\\">EMail</th>\\n                            <th scope=\\\"col\\\">Frequency</th>\\n                            <th scope=\\\"col\\\">Repositories</th>\\n                            <th scope=\\\"col\\\">Search Keywords</th>\\n                            <th scope=\\\"col\\\">Last Executed</th>\\n                            <th scope=\\\"col\\\">Status</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr class=\\\"table-light\\\" *ngFor=\\\"let notification of notifications; let i = index\\\"\\n                            [attr.data-index]=\\\"i\\\">\\n                            <td>\\n                                <input id=\\\"test\\\" name=\\\"{{notification.getNotificationTO.id}}\\\" type=\\\"checkbox\\\"\\n                                    value=\\\"{{notification.getNotificationTO.id}}\\\" [(ngModel)]=\\\"notification.selected\\\">\\n                                <label for=\\\"test\\\"></label>\\n                            </td>\\n                            <th scope=\\\"row\\\">{{i+1}}</th>\\n                            <td>{{notification.getNotificationTO.email}}</td>\\n                            <td>{{notification.getNotificationTO.frequency}} minutes</td>\\n                            <td>\\n                                <ul>\\n                                    <li *ngFor=\\\"let repository of notification.getNotificationTO.repositories\\\">\\n                                        {{repository}}</li>\\n                                </ul>\\n                            </td>\\n                            <td>\\n                                <ul>\\n                                    <li *ngFor=\\\"let searchKeyword of notification.getNotificationTO.searchKeywords\\\">\\n                                        {{searchKeyword}}</li>\\n                                </ul>\\n                            </td>\\n                            <td *ngIf=\\\"notification.getNotificationTO.status != 'INIT'; else showNever\\\">\\n                                {{notification.getNotificationTO.lastExecutedAt.toLocaleString()}}</td>\\n                            <ng-template #showNever>\\n                                <td>Never</td>\\n                            </ng-template>\\n                            <td>{{notification.getNotificationTO.status}}</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n                <button style=\\\"margin-right: 1%; width:10%;\\\" type=\\\"button\\\" class=\\\"btn btn-success\\\"\\n                    (click)=\\\"editNotification()\\\">Edit</button>\\n                <button type=\\\"button\\\" style=\\\"width:10%;\\\" (click)=\\\"deleteNotifications()\\\"\\n                    class=\\\"btn btn-info\\\">Delete</button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"region\\\">\\n        <app-add-notification [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"\\n            (notificationCreated)=\\\"notificationCreated($event)\\\"></app-add-notification>\\n    </div>\\n</div>\\n<app-footer></app-footer>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { TaskschedulerService } from \"../service/taskscheduler/taskscheduler.service\";\nimport { GetNotificationTO, Notification, AddNotificationTO } from \"../dto/notificationTO\";\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\nimport { AlertifyService } from '../service/alertify/alertify.service';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { RepositoryTO } from '../dto/repositoryTO';\nimport { forEach } from '@angular/router/src/utils/collection';\nimport { EditNotificationComponent } from '../edit-notification/edit-notification.component';\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.css']\n})\nexport class NotificationsComponent implements OnInit {\n\n  notifications: Notification[] = [];\n  notificationTos: GetNotificationTO[] = [];\n  selectedNotification: Notification;\n  username: string;\n  isAuthenticated: boolean;\n\n  constructor(private taskSchedulerService: TaskschedulerService,\n    private githubAuthService: GithubauthService,\n    private alertifyService: AlertifyService,\n    private modalService: NgbModal) { }\n\n  ngOnInit() {\n    this.loggedIn();\n  }\n\n  loggedIn() {\n    this.githubAuthService.isAuthenticated().subscribe(response => {\n      if (response.status == 200) {\n        this.isAuthenticated = true;\n        this.githubAuthService.getCurrentUser().subscribe(currentUser => {\n          this.username = currentUser.username;\n        });\n        this.getAllNotifications();\n      }\n    });\n  }\n\n  getAllNotifications() {\n    this.taskSchedulerService.getNotifications().subscribe(notificationTos => {\n      this.notificationTos = notificationTos;\n      this.notificationTos.forEach(notificationTO => {\n        this.notifications.push(new Notification(notificationTO, false))\n      })\n    })\n  }\n\n  deleteNotifications() {\n    this.alertifyService.confirm(\"Delete Notification\", \"Are you sure you want to delete this notification?\", () => {\n      let selectedNotifications = this.getSelectedNotifications();\n      selectedNotifications.forEach(selectedNotification => {\n        this.taskSchedulerService.deleteNotification(selectedNotification.getNotificationTO.frequency).subscribe(() => {\n          this.notifications.splice(this.notifications.indexOf(selectedNotification));\n          this.alertifyService.success(\"Notification deleted.\");\n        });\n      });\n    });\n  }\n\n  editNotification() {\n    const modalRef = this.modalService.open(EditNotificationComponent);\n    modalRef.componentInstance.selectedNotification = this.getSelectedNotification();\n    modalRef.componentInstance.username = this.username;\n  }\n\n  getSelectedNotifications(): Notification[] {\n    return this.notifications.filter(notification => notification.selected == true);\n  }\n  getSelectedNotification(): Notification {\n    let selectedNotifications: Notification[] = this.getSelectedNotifications();\n    if (selectedNotifications != null) {\n      this.selectedNotification = selectedNotifications[0];\n      return this.selectedNotification;\n    }\n  }\n\n  notificationCreated(notificationCreated: boolean) {\n    if (notificationCreated == true) {\n      this.notifications = [];\n      this.getAllNotifications();\n    }\n  }\n\n  uncheckNotifications() {\n    this.notifications.forEach(notification => {\n      notification.selected = false;\n    })\n  }\n}\n","import { Injectable } from '@angular/core';\ndeclare let alertify: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertifyService {\n\n  constructor() {\n\n  }\n\n  confirm(title: string, message: string, okCallback: () => any) {\n    alertify.confirm(title, message, function (e) {\n      if (e) {\n        okCallback();\n      } else {\n      }\n    }, function(e){\n      if (e){\n       \n      }\n    }\n    )\n  }\n\n  success(message: string) {\n    alertify.success(message);\n  }\n\n  error(message: string) {\n    alertify.error(message);\n  }\n\n  warning(message: string) {\n    alertify.warning(message);\n  }\n\n  message(message: string) {\n    alertify.message(message);\n  }\n\n\n\n\n}\n","import {HttpClient, HttpHeaders, HttpResponse} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs/index\";\r\nimport {UserTO} from \"../../dto/userTO\";\r\nimport {Inject, Injectable} from \"@angular/core\";\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Accept': 'application/json', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Access-Control-Allow-Methods':'POST, GET, OPTIONS, DELETE, PUT', 'Access-Control-Allow-Headers': \"X-Requested-With, Content-Type, Origin, Authorization, Accept, Client-Security-Token, Accept-Encoding\"})\r\n};\r\n// const headers = new HttpHeaders({ 'Accept': 'application/json', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Access-Control-Allow-Methods':'POST, GET, OPTIONS, DELETE, PUT', 'Access-Control-Allow-Headers': \"X-Requested-With, Content-Type, Origin, Authorization, Accept, Client-Security-Token, Accept-Encoding\"});\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class GithubauthService {\r\n\r\n    public apiUrl = \"api/auth/login\";\r\n    public baseUrl;\r\n    public httpClient:HttpClient;\r\n    // public headers = new HttpHeaders({ 'Accept': 'application/json', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Access-Control-Allow-Methods':'POST, GET, OPTIONS, DELETE, PUT', 'Access-Control-Allow-Headers': \"X-Requested-With, Content-Type, Origin, Authorization, Accept, Client-Security-Token, Accept-Encoding\"});\r\n\r\n\r\n    constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n        this.httpClient = http;\r\n        this.baseUrl = baseUrl;\r\n    }\r\n\r\n    login():Observable<HttpResponse<string>>{\r\n        return this.httpClient.get<string>(this.baseUrl + this.apiUrl, {observe: 'response', responseType: 'text' as 'json'});\r\n    }\r\n\r\n    logout(){\r\n        return this.httpClient.get<void>(this.baseUrl + \"api/auth/logout\",  {observe: 'response'});\r\n    }\r\n    \r\n    isAuthenticated(){\r\n        return this.httpClient.get<void>(this.baseUrl + \"api/auth/isauthenticated\",  {observe: 'response'});\r\n    }\r\n\r\n    alreadyCreated(){\r\n        return this.httpClient.get<void>(this.baseUrl + \"api/auth/alreadycreated\",  {observe: 'response'});\r\n    }\r\n    \r\n    getCurrentUser():Observable<UserTO>{\r\n        return this.httpClient.get<UserTO>(this.baseUrl + \"api/auth/getcurrentuser\");\r\n    }\r\n    getCurrentUsersRepositories():Observable<string[]>{\r\n        return this.httpClient.get<string[]>(this.baseUrl + \"api/auth/getcurrentusersrepositories\");\r\n    }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n\n  public baseUrl;\n  public httpClient: HttpClient;\n\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n    this.httpClient = http;\n    this.baseUrl = baseUrl;\n  }\n\n  createPayment(amount: number):Observable<string>{\n    return this.httpClient.post<string>(this.baseUrl +\"api/payment/create\", amount, {responseType: 'text' as 'json'});\n  }\n\n}\n","import {Inject, Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpResponse} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs/index\";\r\nimport {GetNotificationTO, AddNotificationTO, UpdateNotificationTO} from \"../../dto/notificationTO\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskschedulerService {\r\n\r\n    public baseUrl;\r\n    public httpClient:HttpClient;\r\n    \r\n    constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n        this.httpClient = http;\r\n        this.baseUrl = baseUrl;\r\n    }\r\n\r\n    getFrequencies():Observable<number[]>{\r\n        return this.httpClient.get<number[]>(this.baseUrl + \"api/frequency/getfrequencies\");\r\n    }\r\n    \r\n    createNotification(notification:AddNotificationTO):Observable<HttpResponse<string>>{\r\n        return this.httpClient.post<string>(this.baseUrl + \"api/notificationtask/addnotification\", notification, {observe: 'response'});\r\n    }\r\n\r\n    getNotifications():Observable<GetNotificationTO[]>{\r\n        return this.httpClient.get<GetNotificationTO[]>(this.baseUrl + \"api/notificationtask/getallnotifications\");\r\n    }\r\n    \r\n    deleteNotification(frequency: number){\r\n        return this.httpClient.delete(this.baseUrl + \"api/notificationtask/deletenotification?frequency=\" + frequency);\r\n    }\r\n\r\n    getCommonKeywords():Observable<string[]>{\r\n        return this.httpClient.get<string[]>(this.baseUrl + \"api/notificationtask/getcommonkeywords\");\r\n    }\r\n\r\n    updateNotification(notification:UpdateNotificationTO){\r\n        return this.httpClient.put(this.baseUrl +\"api/notificationtask/updatenotification\", notification);\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nexport function getBaseUrl() {\n  return document.getElementsByTagName('base')[0].href;\n}\n\nconst providers = [\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\n];\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n"],"sourceRoot":""}