{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-job/add-job.component.css","webpack:///./src/app/add-job/add-job.component.html","webpack:///./src/app/add-job/add-job.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/checkout/checkout.component.css","webpack:///./src/app/checkout/checkout.component.html","webpack:///./src/app/checkout/checkout.component.ts","webpack:///./src/app/contact/contact.component.css","webpack:///./src/app/contact/contact.component.html","webpack:///./src/app/contact/contact.component.ts","webpack:///./src/app/dto/contactTO.ts","webpack:///./src/app/dto/jobTO.ts","webpack:///./src/app/dto/repositoryTO.ts","webpack:///./src/app/dto/subscriptionTO.ts","webpack:///./src/app/edit-job/edit-job.component.css","webpack:///./src/app/edit-job/edit-job.component.html","webpack:///./src/app/edit-job/edit-job.component.ts","webpack:///./src/app/faq/faq.component.css","webpack:///./src/app/faq/faq.component.html","webpack:///./src/app/faq/faq.component.ts","webpack:///./src/app/footer/footer.component.css","webpack:///./src/app/footer/footer.component.html","webpack:///./src/app/footer/footer.component.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/jobs/jobs.component.css","webpack:///./src/app/jobs/jobs.component.html","webpack:///./src/app/jobs/jobs.component.ts","webpack:///./src/app/model/billingaddress-model.ts","webpack:///./src/app/model/contact-model.ts","webpack:///./src/app/model/job-model.ts","webpack:///./src/app/nav-menu/nav-menu.component.css","webpack:///./src/app/nav-menu/nav-menu.component.html","webpack:///./src/app/nav-menu/nav-menu.component.ts","webpack:///./src/app/payment-details/payment-details.component.css","webpack:///./src/app/payment-details/payment-details.component.html","webpack:///./src/app/payment-details/payment-details.component.ts","webpack:///./src/app/payments/payments.component.css","webpack:///./src/app/payments/payments.component.html","webpack:///./src/app/payments/payments.component.ts","webpack:///./src/app/service/alertify/alertify.service.ts","webpack:///./src/app/service/contact/contact.service.ts","webpack:///./src/app/service/githubauth/githubauth.service.ts","webpack:///./src/app/service/job/job.service.ts","webpack:///./src/app/service/payment/payment.service.ts","webpack:///./src/app/settings/settings.component.css","webpack:///./src/app/settings/settings.component.html","webpack:///./src/app/settings/settings.component.ts","webpack:///./src/app/subscription/subscription.component.css","webpack:///./src/app/subscription/subscription.component.html","webpack:///./src/app/subscription/subscription.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".addNotificationMain{\\n    padding-bottom: 10px;\\n}\\n\\n\"","module.exports = \"<div class=\\\"addNotificationMain\\\" *ngIf=\\\"isAuthenticated\\\">\\n  <div class=\\\"card border-0 mb-3\\\">\\n    <div class=\\\"card-header ro-card-header\\\">\\n      <span>\\n        <i class=\\\"fa fa-bell\\\"></i>\\n        <h5>Notify Me !</h5>\\n      </span>\\n      <a data-toggle=\\\"collapse\\\" href=\\\"#collapseAddNotification\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\"\\n        aria-controls=\\\"collapseAddNotification\\\">\\n        <i class=\\\"fa fa-chevron-down \\\"></i>\\n      </a>\\n    </div>\\n    <div class=\\\"card-body collapse show\\\" id=\\\"collapseAddNotification\\\">\\n      <form name=\\\"notificationForm\\\" (ngSubmit)=\\\"createJob()\\\"\\n        #notificationValidator=\\\"ngForm\\\">\\n        <h5>Type</h5>\\n        <p>You can choose between creating a scheduled job or a repository hook.</p>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col\\\">\\n              <div class=\\\"form-group\\\" >\\n            <input type=\\\"radio\\\" name=\\\"schedulerEnabled\\\" (change)=\\\"schedulerEnabledChanged()\\\"\\n             [checked]=\\\"schedulerEnabled\\\">\\n            Scheduled Job\\n            </div>\\n          </div>\\n          <div class=\\\"col\\\">\\n            <div class=\\\"form-group\\\">\\n            <input type=\\\"radio\\\" name=\\\"schedulerEnabled\\\" [checked]=\\\"!schedulerEnabled\\\" (change)=\\\"schedulerEnabledChanged()\\\">\\n          Repository Hook\\n          </div>\\n        </div>\\n        </div>\\n        <hr class=\\\"my-2\\\">\\n        <h5 style=\\\"padding-top:10px;\\\">E-Mail Notification</h5>\\n        <p>To get notified when vulnerable data was leaked in one of your repositories, simply subscribe with your\\n          email down below.</p>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col\\\">\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"email\\\"><b>Email Address</b></label>\\n              <div class=\\\"input-group\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\">@</span>\\n                </div>\\n                <input class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" type=\\\"email\\\" [(ngModel)]=\\\"jobModel.email\\\"\\n                  #email=\\\"ngModel\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Enter email\\\" required email>\\n              </div>\\n              <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\">\\n                <div class=\\\"text-danger\\\" *ngIf=\\\"email?.errors.required\\\"><small>Email is required</small></div>\\n                <div class=\\\"text-danger\\\" *ngIf=\\\"email?.errors.email\\\"><small>Email must be a valid email address</small></div>\\n              </div>\\n              <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">We'll never share your email with anyone else.\\n              </small>\\n            </div>\\n          </div>\\n          <div class=\\\"col\\\">\\n            <label for=\\\"frequency\\\"><b>Frequency</b></label>\\n            <select *ngIf=\\\"schedulerEnabled\\\" [(ngModel)]=\\\"jobModel.selectedFrequency\\\" class=\\\"form-control\\\" id=\\\"frequency\\\"\\n              name=\\\"frequency\\\" required>\\n              <option *ngFor=\\\"let frequency of jobModel.frequencies;\\\" [ngValue]=\\\"frequency\\\">{{frequency}}\\n              </option>\\n            </select>\\n            <select *ngIf=\\\"!schedulerEnabled\\\" [(ngModel)]=\\\"jobModel.selectedFrequency\\\" class=\\\"form-control\\\" id=\\\"frequency\\\"\\n            name=\\\"frequency\\\" disabled>\\n            <option *ngFor=\\\"let frequency of jobModel.frequencies;\\\" [ngValue]=\\\"frequency\\\">{{frequency}}\\n            </option>\\n          </select>\\n            <small id=\\\"frequencyHelp\\\" class=\\\"form-text text-muted\\\">In minutes.</small>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\" style=\\\"padding-top:2%\\\">\\n          <div class=\\\"col\\\">\\n            <label for=\\\"searchKeywordToAdd\\\"><b>Add Search Keywords</b></label>\\n            <div class=\\\"input-group\\\">\\n              <input #searchKeywordToAdd=\\\"ngModel\\\" class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Add Search Keyword\\\" id=\\\"searchKeywordToAdd\\\"\\n                name=\\\"searchKeywordToAdd\\\" [(ngModel)]=\\\"jobModel.searchKeywordToAdd\\\">\\n              <div class=\\\"input-group-append\\\">\\n                <button  class=\\\"btn btn-success\\\" type=\\\"button\\\"\\n                  (click)=\\\"addSearchKeyword(jobModel.searchKeywordToAdd)\\\">Add</button>\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"col\\\">\\n            <label for=\\\"commonKeyword\\\"><b>Common Keywords</b></label>\\n            <div *ngIf=\\\"jobModel.commonKeywords.length > 0; else showNoKeywordsYet\\\">\\n              <span id=\\\"commonKeyword\\\" name=\\\"commonKeyword\\\"\\n                *ngFor=\\\"let commonKeyword of jobModel.commonKeywords\\\">{{commonKeyword}}<button class=\\\"btn\\\"\\n                  style=\\\"background-color:transparent\\\" (click)=\\\"addSearchKeyword(commonKeyword)\\\"><i\\n                    class=\\\"fa fa-plus-circle\\\"></i></button></span>\\n            </div>\\n            <ng-template #showNoKeywordsYet>\\n              <div>\\n                <p>No Keywords added yet.</p>\\n              </div>\\n            </ng-template>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\" style=\\\"padding-top: 2%\\\">\\n          <div class=\\\"col\\\">\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"searchKeywords\\\"><b>SearchKeywords</b></label>\\n              <div>\\n              <div *ngIf=\\\"jobModel.searchKeywords.length == 0 && searchKeywordToAdd.touched\\\" class=\\\"text-danger\\\"><small>Search Keywords are required.</small></div>\\n              <p *ngIf=\\\"jobModel.searchKeywords.length == 0 && !searchKeywordToAdd.touched\\\">No Search Keywords added yet.</p>\\n            </div>\\n              <ul name=\\\"searchKeywords\\\" id=\\\"searchKeywords\\\">\\n                <li *ngFor=\\\"let searchKeyword of jobModel.searchKeywords\\\">{{searchKeyword}} <button class=\\\"btn\\\"\\n                    style=\\\"background-color:transparent\\\" (click)=\\\"removeSearchKeyword(searchKeyword)\\\"><i\\n                      class=\\\"fa fa-minus-circle\\\"></i></button></li>\\n              </ul>\\n            </div>\\n          </div>\\n          <div class=\\\"col\\\">\\n            <label for=\\\"repository\\\"><b>Repositories</b></label>\\n            <div class=\\\"form-group\\\">\\n              <div style=\\\"padding-top: 5px; padding-left:4%;\\\" *ngFor=\\\"let repository of jobModel.repositoryTos\\\"\\n                class=\\\"form-check\\\">\\n                <input type=\\\"checkbox\\\" name=\\\"repository\\\" id=\\\"repository\\\" class=\\\"form-check-input\\\" value=\\\"{{repository.name}}\\\"\\n                  [(ngModel)]=\\\"repository.selected\\\">\\n                {{repository.name}}\\n              </div>\\n            </div>\\n            <div *ngIf=\\\"this.getSelectedRepositories().length < 1\\\">\\n                <div class=\\\"text-danger\\\"><small>Selecting at least one Repository is required.</small></div>\\n              </div>\\n          </div>\\n        </div>\\n        <hr class=\\\"my-2\\\">\\n        <div style=\\\"padding-top: 10px;\\\">\\n        <h5>Mobile Notification</h5>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col\\\">\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"phoneNumber\\\"><b>Phone Number</b></label>\\n              <div class=\\\"input-group\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <span class=\\\"input-group-text\\\">@</span>\\n                </div>\\n                <input class=\\\"form-control\\\" id=\\\"phoneNumber\\\" name=\\\"phoneNumber\\\" type=\\\"tel\\\" [(ngModel)]=\\\"jobModel.phoneNumber\\\"\\n                       aria-describedby=\\\"phoneNumberHelp\\\" placeholder=\\\"Enter Phone Number\\\" >\\n              </div>\\n              <div *ngIf=\\\"!this.jobModel.phoneNumber  && (this.jobModel.whatsappNotificationEnabled || this.jobModel.smsNotificationEnabled)\\\">\\n                  <div class=\\\"text-danger\\\"><small>Providing a Phone Number is required.</small></div>\\n                </div>\\n            </div>\\n          </div>\\n          <div class=\\\"col\\\">\\n            <div style=\\\"display:flex; flex-direction:column;\\\">\\n            <label><b>Type</b></label>\\n              <div class=\\\"form-check form-check-inline\\\">\\n                <input id=\\\"smsNotificationEnabled\\\" name=\\\"smsNotificationEnabled\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"jobModel.smsNotificationEnabled\\\"\\n                       aria-describedby=\\\"smsNotificationEnabledHelp\\\">\\n                <span style=\\\"padding-left:10px;\\\">SMS</span>\\n              </div>\\n              <div class=\\\"form-check form-check-inline\\\">\\n                <input id=\\\"whatsappNotificationEnabled\\\" name=\\\"whatsappNotificationEnabled\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"jobModel.whatsappNotificationEnabled\\\"\\n                        aria-describedby=\\\"whatsappNotificationEnabledHelp\\\">\\n                <span style=\\\"padding-left:10px;\\\">WhatsApp</span>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" style=\\\"padding-top:10px;\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-success btn-lg\\\">Submit</button>\\n        </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit, Input, OnChanges, Output, EventEmitter } from '@angular/core';\nimport { JobService } from \"../service/job/job.service\";\nimport { GithubauthService } from \"../service/githubauth/githubauth.service\";\nimport { RepositoryTO } from \"../dto/repositoryTO\";\nimport { AddJobTO } from \"../dto/jobTO\";\nimport { UserTO } from \"../dto/userTO\";\nimport { FormsModule, Validators } from '@angular/forms';\nimport { AlertifyService } from '../service/alertify/alertify.service';\nimport { AddJobModel } from '../model/job-model';\n\n\n@Component({\n    selector: 'app-add-job',\n    templateUrl: './add-job.component.html',\n    styleUrls: ['./add-job.component.css']\n})\nexport class AddJobComponent implements OnInit, OnChanges {\n\n    jobModel: AddJobModel = new AddJobModel();\n\n    formIsInvalid: boolean;\n\n    constructor(private githubAuthService: GithubauthService, private jobService: JobService, private alertifyService: AlertifyService) { }\n\n    @Input() username: string;\n    @Input() isAuthenticated: boolean;\n    @Output() jobCreated = new EventEmitter<boolean>();\n\n    schedulerEnabled: boolean = true;\n\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n        this.refreshData();\n    }\n\n    refreshData() {\n        if (this.isAuthenticated) {\n            this.getCurrentUserRepositories();\n            this.getFrequencies();\n            this.getCommonKeywords();\n        }\n    }\n\n\n    getCurrentUserRepositories() {\n        this.githubAuthService.getCurrentUsersRepositories().subscribe(repositories => {\n            this.jobModel.repositories = repositories;\n            this.jobModel.repositoryTos = [];\n            this.jobModel.repositories.forEach(repository => this.jobModel.repositoryTos.push(new RepositoryTO(repository, false)));\n        });\n    }\n\n    getFrequencies() {\n        this.jobService.getFrequencies().subscribe(frequencies => {\n            this.jobModel.frequencies = frequencies;\n            this.jobModel.selectedFrequency = this.jobModel.frequencies[0];\n        });\n    }\n\n    getCommonKeywords() {\n        this.jobService.getCommonKeywords().subscribe(commonKeywords => this.jobModel.commonKeywords = commonKeywords);\n    }\n\n    createJob() {\n        let job: AddJobTO = new AddJobTO();\n        job.email = this.jobModel.email;\n        job.frequency = this.jobModel.selectedFrequency;\n        job.searchKeywords = this.jobModel.searchKeywords;\n        job.emailNotificationEnabled = true;\n        job.smsNotificationEnabled = this.jobModel.smsNotificationEnabled;\n        job.whatsappNotificationEnabled = this.jobModel.whatsappNotificationEnabled;\n        job.phoneNumber = this.jobModel.phoneNumber;\n        job.schedulerEnabled = this.schedulerEnabled;\n        \n        let repositories: string[] = this.getSelectedRepositories();\n        job.repositories = repositories;\n\n        this.githubAuthService.getCurrentUser().subscribe(user => {\n            job.username = user.username;\n            this.jobService.createJob(job).subscribe(response => {\n                console.log(response.status);\n                if (response.status === 200) {\n                    this.jobCreated.emit(true);\n                    this.alertifyService.success(\"Notification created.\");\n                } else if (response.status === 409) {\n                    this.alertifyService.warning(\"Notification already exists.\");\n                } else{\n                    this.alertifyService.error(\"An Error occurred.\");\n                }\n                this.clearFormData();\n            });\n        });\n    }\n\n    checkFormIsInvalid(): boolean {\n        let formIsInvalid: boolean = (this.jobModel.email.length < 4 || this.jobModel.selectedFrequency == null || this.jobModel.searchKeywords.length < 1 || this.getSelectedRepositories().length < 1);\n        if (formIsInvalid) {\n            this.formIsInvalid = true;\n            return true;\n        }\n        return false;\n    }\n\n    clearFormData() {\n        this.jobModel.email = \"\";\n        this.jobModel.selectedFrequency = this.jobModel.frequencies[0];\n        this.jobModel.repositoryTos.forEach(repository => repository.selected = false);\n        this.jobModel.searchKeywords = [];\n        this.jobModel.phoneNumber =\"\";\n        this.jobModel.whatsappNotificationEnabled = false;\n        this.jobModel.smsNotificationEnabled = false;\n        this.jobModel.schedulerEnabled = false;\n    }\n\n    getSelectedRepositories(): string[] {\n        let repositories: string[] = this.jobModel.repositoryTos.filter(repositoryTO => repositoryTO.selected)\n            .map(selectedRepository => selectedRepository.name);\n        return repositories;\n    }\n\n    addSearchKeyword(searchKeywordToAdd: string) {\n        if (this.jobModel.searchKeywords.filter(searchKeyword => searchKeyword == searchKeywordToAdd).length < 1) {\n            this.jobModel.searchKeywords.push(searchKeywordToAdd);\n            this.jobModel.searchKeywordToAdd = \"\";\n        }\n    }\n\n    removeSearchKeyword(searchKeywordToDelete: string) {\n        this.jobModel.searchKeywords = this.jobModel.searchKeywords.filter(searchKeyword => searchKeyword != searchKeywordToDelete);\n    }\n\n\n    schedulerEnabledChanged(){\n        this.schedulerEnabled = !this.schedulerEnabled;\n    }\n\n    printModel(){\n        console.log(this.jobModel);\n        console.log(this.schedulerEnabled);\n    }\n\n    phoneNumberRequired(): boolean{\n        return this.jobModel.phoneNumber.length < 1 && (this.jobModel.whatsappNotificationEnabled || this.jobModel.smsNotificationEnabled);\n    }\n}\n","module.exports = \"@media (max-width: 767px) {\\n  /* On small screens, the nav menu spans the full width of the screen. Leave a space for it. */\\n  .body-content {\\n    padding-top: 50px;\\n    background-color:#f3f3f4;\\n  }\\n\\n}\\n\\n\\n\"","module.exports = \"<router-outlet></router-outlet>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'RepositoryNotifier';\n\n  constructor(){\n    \n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, Validators  } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, ExtraOptions } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { NavMenuComponent } from './nav-menu/nav-menu.component';\nimport { HomeComponent } from './home/home.component';\nimport { JobsComponent } from './jobs/jobs.component';\nimport { AddJobComponent } from './add-job/add-job.component';\nimport { GithubauthService } from './service/githubauth/githubauth.service';\nimport { FooterComponent } from './footer/footer.component';\nimport { JobService } from './service/job/job.service';\nimport { AlertifyService } from './service/alertify/alertify.service';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport { EditJobComponent } from './edit-job/edit-job.component';\nimport { SubscriptionComponent } from './subscription/subscription.component';\nimport { PaymentsComponent } from './payments/payments.component';\nimport { CheckoutComponent } from './checkout/checkout.component';\nimport { ContactComponent } from './contact/contact.component';\nimport { ContactService } from './service/contact/contact.service';\nimport { PaymentDetailsComponent } from './payment-details/payment-details.component';\nimport { FaqComponent } from './faq/faq.component';\nimport { SettingsComponent } from './settings/settings.component';\n\nconst config: ExtraOptions = {\n  onSameUrlNavigation: 'reload'\n};\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavMenuComponent,\n    HomeComponent,\n    JobsComponent,\n    AddJobComponent,\n    FooterComponent,\n    EditJobComponent,\n    SubscriptionComponent,\n    PaymentsComponent,\n    CheckoutComponent,\n    ContactComponent,\n    PaymentDetailsComponent,\n    FaqComponent,\n    SettingsComponent,\n  ],\n  exports: [],\n  entryComponents: [EditJobComponent, PaymentDetailsComponent],\n  imports: [\n    BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),\n    HttpClientModule,\n    FormsModule,\n    NgbModule,\n    FormsModule,\n    RouterModule.forRoot([\n      { path: '', redirectTo: 'home', pathMatch: 'full' },\n      { path: 'home', component: HomeComponent },\n      { path: 'notifications', component: JobsComponent },\n      { path: 'payments', component: PaymentsComponent },\n      { path: 'checkout', component: CheckoutComponent },\n      { path: 'contact', component: ContactComponent },\n      { path: 'settings', component: SettingsComponent },\n      { path: 'faq', component: FaqComponent },\n\n    ], config)\n  ],\n  providers: [GithubauthService, JobService, AlertifyService, ContactService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \".container {\\n    max-width: 960px;\\n  }\\n  \\n  .lh-condensed { line-height: 1.25; }\\n  \\n  .paymentsMain{\\n    padding-bottom: 20px;\\n}\\n  \\n  .region{\\n    padding-top: 30px;\\n    padding-bottom: 10px;\\n}\"","module.exports = \"<app-nav-menu [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-nav-menu>\\n<div class=\\\"container card paymentsMain\\\">\\n  <div class=\\\"py-5 text-center\\\">\\n    <h2>Checkout</h2>\\n    <p class=\\\"lead\\\">Please provide your billing address below.</p>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-4 order-md-2 mb-4\\\">\\n      <h4 class=\\\"d-flex justify-content-between align-items-center mb-3\\\">\\n        <span class=\\\"text-muted\\\">Your order</span>\\n        <span class=\\\"badge badge-secondary badge-pill\\\">1</span>\\n      </h4>\\n      <ul class=\\\"list-group mb-3\\\">\\n        <li class=\\\"list-group-item d-flex justify-content-between lh-condensed\\\">\\n          <div>\\n            <h6 class=\\\"my-0\\\">Premium Plan Pro</h6>\\n            <small class=\\\"text-muted\\\">Abonement</small>\\n          </div>\\n          <span class=\\\"text-muted\\\">€10</span>\\n        </li>\\n        <!-- <li class=\\\"list-group-item d-flex justify-content-between lh-condensed\\\">\\n          <div>\\n            <h6 class=\\\"my-0\\\">Second product</h6>\\n            <small class=\\\"text-muted\\\">Brief description</small>\\n          </div>\\n          <span class=\\\"text-muted\\\">$8</span>\\n        </li>\\n        <li class=\\\"list-group-item d-flex justify-content-between lh-condensed\\\">\\n          <div>\\n            <h6 class=\\\"my-0\\\">Third item</h6>\\n            <small class=\\\"text-muted\\\">Brief description</small>\\n          </div>\\n          <span class=\\\"text-muted\\\">$5</span>\\n        </li>\\n        <li class=\\\"list-group-item d-flex justify-content-between bg-light\\\">\\n          <div class=\\\"text-success\\\">\\n            <h6 class=\\\"my-0\\\">Promo code</h6>\\n            <small>EXAMPLECODE</small>\\n          </div>\\n          <span class=\\\"text-success\\\">-$5</span>\\n        </li> -->\\n        <li class=\\\"list-group-item d-flex justify-content-between\\\">\\n          <span>Total (EUR)</span>\\n          <strong>€10</strong>\\n        </li>\\n      </ul>\\n\\n      <!-- <form class=\\\"card p-2\\\">\\n        <div class=\\\"input-group\\\">\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Promo code\\\">\\n          <div class=\\\"input-group-append\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-secondary\\\">Redeem</button>\\n          </div>\\n        </div>\\n      </form> -->\\n    </div>\\n    \\n    <div class=\\\"col-md-8 order-md-1\\\">\\n      <h4 class=\\\"mb-3\\\">Billing address</h4>\\n      <form class=\\\"needs-validation\\\" novalidate>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6 mb-3\\\">\\n            <label for=\\\"firstName\\\">First Name</label>\\n            <input [(ngModel)]=\\\"billingAddress.firstName\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"firstName\\\" name=\\\"firstName\\\" placeholder=\\\"\\\" value=\\\"{{billingAddress.firstName}}\\\" required>\\n            <div class=\\\"invalid-feedback\\\">\\n              Valid first name is required.\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-6 mb-3\\\">\\n            <label for=\\\"lastName\\\">Last Name</label>\\n            <input [(ngModel)]=\\\"billingAddress.lastName\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastName\\\" name=\\\"lastName\\\" placeholder=\\\"\\\" value=\\\"{{billingAddress.lastName}}\\\" required>\\n            <div class=\\\"invalid-feedback\\\">\\n              Valid last name is required.\\n            </div>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"mb-3\\\">\\n          <label for=\\\"email\\\">E-Mail</label>\\n          <div class=\\\"input-group\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n              <span class=\\\"input-group-text\\\">@</span>\\n            </div>\\n            <input  [(ngModel)]=\\\"billingAddress.eMail\\\" type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" value=\\\"{{billingAddress.eMail}}\\\" placeholder=\\\"you@example.com\\\" required>\\n            <div class=\\\"invalid-feedback\\\" style=\\\"width: 100%;\\\">\\n              Please enter a valid email address for shipping updates.\\n            </div>\\n          </div>\\n        </div>\\n\\n        <!-- <div class=\\\"mb-3\\\">\\n          <label for=\\\"email\\\">Email <span class=\\\"text-muted\\\">(Optional)</span></label>\\n          <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" placeholder=\\\"you@example.com\\\">\\n          <div class=\\\"invalid-feedback\\\">\\n            Please enter a valid email address for shipping updates.\\n          </div>\\n        </div> -->\\n\\n        <div class=\\\"mb-3\\\">\\n          <label for=\\\"address\\\">Address</label>\\n          <input  [(ngModel)]=\\\"billingAddress.address\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"address\\\" name=\\\"address\\\" value=\\\"{{billingAddress.address}}\\\" placeholder=\\\"1234 Main St\\\" required>\\n          <div class=\\\"invalid-feedback\\\">\\n            Please enter your shipping address.\\n          </div>\\n        </div>\\n\\n        <div class=\\\"mb-3\\\">\\n          <label for=\\\"address2\\\">Address 2 <span class=\\\"text-muted\\\">(Optional)</span></label>\\n          <input  [(ngModel)]=\\\"billingAddress.addressAddition\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"address2\\\" name=\\\"addressAddition\\\" value=\\\"{{billingAddress.addressAddition}}\\\" placeholder=\\\"Apartment or suite\\\">\\n        </div>\\n\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-5 mb-3\\\">\\n            <label for=\\\"country\\\">Country</label>\\n            <select  [(ngModel)]=\\\"billingAddress.country\\\" class=\\\"custom-select d-block w-100\\\" id=\\\"country\\\" name=\\\"country\\\" required>\\n              <option value=\\\"{{billingAddress.country}}\\\">Choose...</option>\\n              <option>Germany</option>\\n            </select>\\n            <div class=\\\"invalid-feedback\\\">\\n              Please select a valid country.\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-4 mb-3\\\">\\n            <label for=\\\"city\\\">City</label>\\n            <input  [(ngModel)]=\\\"billingAddress.city\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"city\\\" name=\\\"city\\\" value=\\\"{{billingAddress.city}}\\\" placeholder=\\\"\\\" required>\\n            <div class=\\\"invalid-feedback\\\">\\n              Please provide a valid state.\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-3 mb-3\\\">\\n            <label for=\\\"zip\\\">Zip</label>\\n            <input  [(ngModel)]=\\\"billingAddress.postalCode\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"zip\\\" name=\\\"zip\\\" value=\\\"{{billingAddress.postalCode}}\\\" placeholder=\\\"\\\" required>\\n            <div class=\\\"invalid-feedback\\\">\\n              Zip code required.\\n            </div>\\n          </div>\\n        </div>\\n        <!-- <hr class=\\\"mb-4\\\"> -->\\n        <!-- <div class=\\\"custom-control custom-checkbox\\\">\\n          <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" id=\\\"same-address\\\">\\n          <label class=\\\"custom-control-label\\\" for=\\\"same-address\\\">Shipping address is the same as my billing address</label>\\n        </div> -->\\n        <!-- <div class=\\\"custom-control custom-checkbox\\\">\\n          <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" id=\\\"save-info\\\">\\n          <label class=\\\"custom-control-label\\\" for=\\\"save-info\\\">Save this information for next time</label>\\n        </div> -->\\n        <!-- <hr class=\\\"mb-4\\\">\\n\\n        <h4 class=\\\"mb-3\\\">Payment</h4>\\n\\n        <div class=\\\"d-block my-3\\\">\\n            <div class=\\\"custom-control custom-radio\\\">\\n                <input id=\\\"paypal\\\" name=\\\"paymentMethod\\\" type=\\\"radio\\\" class=\\\"custom-control-input\\\" checked required>\\n                <label class=\\\"custom-control-label\\\" for=\\\"paypal\\\">PayPal</label>\\n              </div>\\n          <div class=\\\"custom-control custom-radio\\\">\\n            <input id=\\\"credit\\\" name=\\\"paymentMethod\\\" type=\\\"radio\\\" class=\\\"custom-control-input\\\" required disabled>\\n            <label class=\\\"custom-control-label\\\" for=\\\"credit\\\">Credit card</label>\\n          </div>\\n          <div class=\\\"custom-control custom-radio\\\">\\n            <input id=\\\"debit\\\" name=\\\"paymentMethod\\\" type=\\\"radio\\\" class=\\\"custom-control-input\\\" required disabled>\\n            <label class=\\\"custom-control-label\\\" for=\\\"debit\\\">Debit card</label>\\n          </div>\\n        </div> -->\\n        <!-- <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6 mb-3\\\">\\n            <label for=\\\"cc-name\\\">Name on card</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"cc-name\\\" placeholder=\\\"\\\" required>\\n            <small class=\\\"text-muted\\\">Full name as displayed on card</small>\\n            <div class=\\\"invalid-feedback\\\">\\n              Name on card is required\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-6 mb-3\\\">\\n            <label for=\\\"cc-number\\\">Credit card number</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"cc-number\\\" placeholder=\\\"\\\" required>\\n            <div class=\\\"invalid-feedback\\\">\\n              Credit card number is required\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-3 mb-3\\\">\\n            <label for=\\\"cc-expiration\\\">Expiration</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"cc-expiration\\\" placeholder=\\\"\\\" required>\\n            <div class=\\\"invalid-feedback\\\">\\n              Expiration date required\\n            </div>\\n          </div>\\n          <div class=\\\"col-md-3 mb-3\\\">\\n            <label for=\\\"cc-cvv\\\">CVV</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"cc-cvv\\\" placeholder=\\\"\\\" required>\\n            <div class=\\\"invalid-feedback\\\">\\n              Security code required\\n            </div>\\n          </div>\\n        </div> -->\\n        <hr class=\\\"mb-4\\\">\\n        <button class=\\\"btn btn-primary btn-lg btn-block\\\" (click)=\\\"checkout()\\\" type=\\\"button\\\"><i class=\\\"fa fa-paypal\\\"></i> Checkout</button>\\n      </form>\\n    </div>\\n  </div>\\n</div>\\n<app-footer></app-footer>\\n\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\nimport { PaymentService } from '../service/payment/payment.service';\nimport { BillingAddressModel } from '../model/billingaddress-model';\nimport { DOCUMENT } from '@angular/common';\nimport { CreateSusbcriptionTO } from '../dto/subscriptionTO';\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css']\n})\nexport class CheckoutComponent implements OnInit {\n\n    isAuthenticated: boolean;\n    username: string;\n    billingAddress: BillingAddressModel = new BillingAddressModel();\n\n    constructor(private githubAuthService: GithubauthService, private paymentService: PaymentService, @Inject(DOCUMENT) private document:any) {\n    }\n\n\n    ngOnInit() {\n        this.loggedIn();\n    }\n\n    loggedIn() {\n        this.githubAuthService.isAuthenticated().subscribe(response => {\n            if (response.status == 200) {\n                this.isAuthenticated = true;\n                this.githubAuthService.getCurrentUser().subscribe(username => {\n                    this.username = username.username\n                });\n            }\n        });\n    }\n\n\n    checkout(){\n      let createAbonementTO: CreateSusbcriptionTO = new CreateSusbcriptionTO();\n      createAbonementTO.amount = 10;\n      createAbonementTO.billingAddress = this.billingAddress;\n\n      this.paymentService.createSubscription(createAbonementTO).subscribe(redirectUrl => {\n        this.document.location.href = redirectUrl;\n      })\n    }\n\n}\n","module.exports = \"#contactForm{\\n    padding-left:15%;\\n    padding-right:15%;\\n}\"","module.exports = \"<app-nav-menu [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-nav-menu>\\n<div class=\\\"container\\\">\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-header p-0\\\">\\n      <div class=\\\"bg-primary text-white text-center py-2\\\">\\n        <h3><i class=\\\"fa fa-envelope\\\"></i> Contact Us:</h3>\\n        <p class=\\\"m-0\\\">We'll almost never answer.</p>\\n      </div>\\n    </div>\\n    <div class=\\\"card-body\\\" id=\\\"contactForm\\\">\\n\\n      <div class=\\\"mb-3\\\">\\n        <label>Name:</label>\\n        <div class=\\\"input-group\\\">\\n          <div class=\\\"input-group-prepend\\\">\\n            <span class=\\\"input-group-text\\\" id=\\\"name-addon\\\"><i class=\\\"fa fa-user\\\"></i></span>\\n          </div>\\n          <input id=\\\"name\\\" name=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Max Patternman\\\" aria-label=\\\"Name\\\"\\n            aria-describedby=\\\"name-addon\\\" [(ngModel)]=\\\"contactModel.name\\\" #name=\\\"ngModel\\\" required name>\\n        </div>\\n        <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\">\\n          <div class=\\\"text-danger\\\" *ngIf=\\\"name?.errors.required\\\"><small>Name is required</small></div>\\n        </div>\\n      </div>\\n\\n\\n\\n      <div class=\\\"mb-3\\\">\\n\\n        <label>E-Mail:</label>\\n        <div class=\\\"input-group\\\">\\n          <div class=\\\"input-group-prepend\\\">\\n            <span class=\\\"input-group-text\\\" id=\\\"email-addon\\\"><i class=\\\"fa fa-envelope\\\"></i></span>\\n          </div>\\n          <input id=\\\"email\\\" name=\\\"email\\\" type=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"maxpatternman@gmail.com\\\"\\n            aria-label=\\\"E-Mail\\\" aria-describedby=\\\"email-addon\\\" [(ngModel)]=\\\"contactModel.email\\\" #email=\\\"ngModel\\\"\\n            required email>\\n\\n        </div>\\n        <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\">\\n          <div class=\\\"text-danger\\\" *ngIf=\\\"email?.errors.required\\\"><small>Email is required</small></div>\\n          <div class=\\\"text-danger\\\" *ngIf=\\\"email?.errors.email\\\"><small>Email must be a valid email address</small></div>\\n        </div>\\n      </div>\\n\\n      <!-- <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">We'll never share your email with anyone else.\\n      </small> -->\\n\\n\\n      <div class=\\\"mb-3\\\">\\n\\n        <label>Subject:</label>\\n        <div class=\\\"input-group\\\">\\n          <div class=\\\"input-group-prepend\\\">\\n            <span class=\\\"input-group-text\\\" id=\\\"subject-addon\\\"><i class=\\\"fa fa-bolt\\\"></i></span>\\n          </div>\\n          <input id=\\\"subject\\\" name=\\\"subject\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"I hate this product\\\"\\n            aria-label=\\\"Subject\\\" aria-describedby=\\\"subject-addon\\\" [(ngModel)]=\\\"contactModel.subject\\\" #subject=\\\"ngModel\\\"\\n            required subject>\\n        </div>\\n        <div *ngIf=\\\"subject.invalid && (subject.dirty || subject.touched)\\\">\\n          <div class=\\\"text-danger\\\" *ngIf=\\\"subject?.errors.required\\\"><small>Subject is required</small></div>\\n        </div>\\n\\n\\n      </div>\\n\\n\\n      <div class=\\\"mb-3\\\">\\n\\n        <label>Your Message:</label>\\n        <div class=\\\"input-group\\\">\\n          <div class=\\\"input-group-prepend\\\">\\n            <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\"><i class=\\\"fa fa-pencil\\\"></i></span>\\n          </div>\\n          <textarea id=\\\"message\\\" name=\\\"message\\\" class=\\\"form-control\\\" rows=\\\"10\\\"\\n            placeholder=\\\"Write your message down here ...\\\" [(ngModel)]=\\\"contactModel.message\\\" #message=\\\"ngModel\\\"\\n            required message></textarea>\\n        </div>\\n\\n        <div *ngIf=\\\"message.invalid && (message.dirty || message.touched)\\\">\\n          <div class=\\\"text-danger\\\" *ngIf=\\\"message?.errors.required\\\"><small>Message is required</small></div>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"text-center\\\">\\n        <button class=\\\"btn btn-success btn-block py-2\\\" (click)=\\\"sendMessage()\\\">Submit</button>\\n      </div>\\n    </div>\\n\\n\\n\\n  </div>\\n</div>\\n\\n<div class=\\\"container mt-3 mb-3\\\">\\n  <div class=\\\"card\\\">\\n    <div class=\\\"mb-4\\\">\\n    </div>\\n    <div class=\\\"row text-center\\\">\\n      <div class=\\\"col-md-4\\\">\\n        <a class=\\\"text-primary\\\" style=\\\"font-size:40px;\\\"><i class=\\\"fa fa-map-marker\\\"></i></a>\\n        <p>Saarbridges, 66111,<br> Germoney</p>\\n      </div>\\n      <div class=\\\"col-md-4\\\">\\n        <a class=\\\"text-primary\\\" style=\\\"font-size:40px;\\\"><i class=\\\"fa fa-phone\\\"></i></a>\\n        <p>+ 01 234 567 159, <br> Mon - Tue, 15:00-15:00</p>\\n      </div>\\n      <div class=\\\"col-md-4\\\">\\n        <a class=\\\"text-primary\\\" style=\\\"font-size:40px;\\\"><i class=\\\"fa fa-envelope\\\"></i></a>\\n        <p>info@repositoryobserver.com <br> sale@repositoryobserver.com</p>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<app-footer></app-footer>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\nimport { DOCUMENT } from '@angular/common';\nimport { ContactService } from '../service/contact/contact.service';\nimport { ContactModel } from '../model/contact-model';\nimport { AddContactTO } from '../dto/contactTO';\nimport { AlertifyService } from '../service/alertify/alertify.service';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\nexport class ContactComponent implements OnInit {\n\n\n  isAuthenticated: boolean;\n  username: string;\n  contactModel:ContactModel = new ContactModel();\n  formIsInvalid:boolean;\n\n  constructor(private contactService:ContactService,\n    private githubAuthService: GithubauthService,\n    @Inject(DOCUMENT) private document:any,\n    private alertifyService:AlertifyService) {\n\n  }\n\n  ngOnInit() {\n      this.loggedIn();\n  }\n\n  loggedIn() {\n      this.githubAuthService.isAuthenticated().subscribe(response => {\n          if (response.status == 200) {\n              this.isAuthenticated = true;\n              this.githubAuthService.getCurrentUser().subscribe(username => {\n                  this.username = username.username;\n              });\n          }\n      });\n  }\n\n  sendMessage(){\n    if (this.checkFormIsInvalid()){\n      this.alertifyService.error(\"Please provide all necessary information.\");\n      return;\n    }\n\n    var contactMessage:AddContactTO = new AddContactTO();\n    contactMessage.name = this.contactModel.name;\n    contactMessage.email = this.contactModel.email;\n    contactMessage.subject = this.contactModel.subject;\n    contactMessage.message = this.contactModel.message;\n\n\n    this.contactService.addContact(contactMessage).subscribe(response => {\n      console.log(response.status);\n      if (response.status === 200) {\n          this.alertifyService.success(\"Message created.\");\n      } else{\n          this.alertifyService.error(\"An Error occurred.\");\n      }\n      this.clearFormData();\n    \n    });\n  }\n\n  clearFormData(){\n    this.contactModel.name = \"\";\n    this.contactModel.email =\"\";\n    this.contactModel.subject = \"\";\n    this.contactModel.message = \"\";\n  }\n\n\n\n  checkFormIsInvalid(): boolean {\n    let formIsInvalid: boolean = (this.contactModel.email.length < 4 || this.contactModel.name.length < 4 || this.contactModel.subject.length < 4 || this.contactModel.message.length < 20);\n    if (formIsInvalid) {\n        this.formIsInvalid = true;\n        return true;\n    }\n    return false;\n}\n\n}\n","export class AddContactTO{\n    public name: string;\n    public email:string;\n    public subject:string;\n    public message:string;\n}","export class AddJobTO{\n    username: string;\n    email: string;\n    repositories: string[];\n    frequency: number;\n    searchKeywords: string[];\n    phoneNumber:string;\n    emailNotificationEnabled:boolean;\n    smsNotificationEnabled:boolean;\n    whatsappNotificationEnabled:boolean;\n    schedulerEnabled:boolean;\n}\n\nexport class UpdateJobTO{\n    username: string;\n    email: string;\n    repositories: string[];\n    frequency: number;\n    searchKeywords: string[];\n}\n\nexport class GetJobTO extends AddJobTO{\n    id: number;\n    createdAt: Date;\n    updatedAt: Date;\n    lastExecutedAt: Date;\n    status: string;\n}\n\nexport class Job{\n    getJobTO: GetJobTO;\n    selected: boolean;\n\n\n    constructor(getJobTO: GetJobTO, selected: boolean) {\n        this.getJobTO = getJobTO;\n        this.selected = selected;\n    }\n}\n\nexport class DeleteJobTO{\n    email: string;\n    frequency: number;\n}\n\nexport class JobResultTO{\n    name:string;\n    path:string;\n    url:string;\n    repositoryName:string;\n    createdAt: Date;\n}\n","// https://stackoverflow.com/questions/34997128/angular-2-get-values-of-multiple-checked-checkboxes\nexport class RepositoryTO {\n    name: string;\n    selected: boolean;\n\n    constructor(name: string, selected: boolean) {\n        this.name = name;\n        this.selected = selected;\n    }\n}\n\n","import { BillingAddressModel } from \"../model/billingaddress-model\";\n\nexport class Subscription{\n    username:string;\n    premiumPlan:PremiumPlan;\n    active:boolean;\n    billingAddress: BillingAddressModel;\n}\n\nexport class CreateSusbcriptionTO{\n    amount:number;\n    billingAddress: BillingAddressModel;\n}\n\nexport class PremiumPlan{\n    name:string;\n    price:number;\n    buyingDate:Date;\n    payments:Payment[];\n}\n\nexport class Payment{\n    amount:number;\n    paymentDate:Date;\n    paymentType:string;\n    billingAddress: BillingAddressModel;\n}\n\nexport class BillingAddressTO{\n    firstName: string;\n    lastName: string;\n    eMail: string;\n    address:string;\n    addressAddition:string;\n    country:string;\n    city:string;\n    postalCode:number;\n}","module.exports = \"\"","module.exports = \"<div class=\\\"modal-header\\\">\\n  <h4 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\">Edit Notification</h4>\\n  <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"activeModal.dismiss('Cross click')\\\">\\n    <span aria-hidden=\\\"true\\\">&times;</span>\\n  </button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n  <form>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\"><b>Email address</b></label>\\n      <input class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" type=\\\"email\\\" [(ngModel)]=\\\"jobModel.email\\\" aria-describedby=\\\"emailHelp\\\"\\n        placeholder=\\\"EMail\\\" value=\\\"{{jobModel.email}}\\\">\\n      <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">We'll never share your email with anyone else.\\n      </small>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"repository\\\"><b>Repositories</b></label>\\n      <div style=\\\"padding-top: 5px; padding-left:4%;\\\" *ngFor=\\\"let repository of jobModel.repositoryTos\\\" class=\\\"form-check\\\">\\n        <input type=\\\"checkbox\\\" name=\\\"repository\\\" class=\\\"form-check-input\\\" value=\\\"{{repository.name}}\\\"\\n          [(ngModel)]=\\\"repository.selected\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n        {{repository.name}}\\n      </div>\\n    </div>\\n    <label for=\\\"searchKeywordToAdd\\\"><b>Add Search Keywords</b></label>\\n    <div class=\\\"form-group\\\">\\n      <div class=\\\"input-group\\\">\\n        <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Add Search Keyword\\\" id=\\\"searchKeywordToAdd\\\"\\n          name=\\\"searchKeywordToAdd\\\" [(ngModel)]=\\\"jobModel.searchKeywordToAdd\\\">\\n        <div class=\\\"input-group-append\\\">\\n          <button class=\\\"btn btn-success\\\" type=\\\"button\\\" (click)=\\\"addSearchKeyword(jobModel.searchKeywordToAdd)\\\">Add</button>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"searchKeywords\\\"><b>SearchKeywords</b></label>\\n      <p *ngIf=\\\"jobModel.searchKeywords == null\\\">No Search Keywords added yet.</p>\\n      <ul name=\\\"searchKeywords\\\" id=\\\"searchKeywords\\\">\\n        <li *ngFor=\\\"let searchKeyword of jobModel.searchKeywords\\\">{{searchKeyword}} <button class=\\\"btn\\\"\\n            style=\\\"background-color:transparent\\\" (click)=\\\"removeSearchKeyword(searchKeyword)\\\"><i\\n              class=\\\"fa fa-minus-circle\\\" style=\\\"color:black\\\"></i></button></li>\\n      </ul>\\n    </div>\\n    <fieldset disabled>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"frequency\\\"><b>Frequency</b></label>\\n        <select [(ngModel)]=\\\"selectedJob.getJobTO.frequency\\\" class=\\\"form-control\\\" id=\\\"frequency\\\"\\n          name=\\\"frequency\\\">\\n          <option *ngFor=\\\"let frequency of jobModel.frequencies;\\\" [ngValue]=\\\"frequency\\\">{{frequency}}</option>\\n        </select>\\n        <small id=\\\"frequencyHelp\\\" class=\\\"form-text text-muted\\\">In minutes.</small>\\n      </div>\\n    </fieldset>\\n  </form>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n  <button type=\\\"button\\\" ngbAutofocus class=\\\"btn btn-outline-dark\\\" (click)=\\\"saveJob()\\\">Save</button>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { RepositoryTO } from '../dto/repositoryTO';\nimport { NgbModalRef, NgbModal, NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { GetJobTO, Job, AddJobTO } from \"../dto/jobTO\";\nimport { JobService } from '../service/job/job.service';\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\nimport { AlertifyService } from '../service/alertify/alertify.service';\nimport { AddJobModel } from '../model/job-model';\n\n\n@Component({\n  selector: 'app-edit-job',\n  templateUrl: './edit-job.component.html',\n  styleUrls: ['./edit-job.component.css']\n})\nexport class EditJobComponent implements OnInit {\n\n  @Input() selectedJob: Job;\n  @Input() username: string;\n\n  jobModel: AddJobModel = new AddJobModel();\n\n  constructor(private jobService: JobService,\n    private githubAuthService: GithubauthService,\n    private alertifyService: AlertifyService,\n    public activeModal: NgbActiveModal) { }\n\n  ngOnInit() {\n    this.getCurrentUserRepositories();\n    this.getFrequencies();\n    this.getCommonKeywords();\n    this.selectedJob.getJobTO.searchKeywords.forEach(searchKeyword => this.jobModel.searchKeywords.push(searchKeyword))\n    this.jobModel.email = this.selectedJob.getJobTO.email;\n  }\n\n  getCurrentUserRepositories() {\n    this.githubAuthService.getCurrentUsersRepositories().subscribe(repositories => {\n      this.jobModel.repositoryTos = [];\n      repositories.forEach(repository => {\n        if (this.selectedJob.getJobTO.repositories.some(x => x === repository)) {\n          this.jobModel.repositoryTos.push(new RepositoryTO(repository, true));\n        } else {\n          this.jobModel.repositoryTos.push(new RepositoryTO(repository, false));\n        }\n      });\n    });\n  }\n\n  uncheckUserRepositories() {\n    this.jobModel.repositoryTos.forEach(repository => {\n      repository.selected = false;\n    });\n  }\n\n  getFrequencies() {\n    this.jobService.getFrequencies().subscribe(frequencies => {\n      this.jobModel.frequencies = frequencies;\n      this.jobModel.selectedFrequency = this.jobModel.frequencies[0];\n    });\n  }\n\n  getCommonKeywords() {\n    this.jobService.getCommonKeywords().subscribe(commonKeywords => this.jobModel.commonKeywords = commonKeywords);\n  }\n\n  addSearchKeyword(searchKeywordToAdd: string) {\n    if (this.jobModel.searchKeywords.filter(searchKeyword => searchKeyword == searchKeywordToAdd).length < 1) {\n      this.jobModel.searchKeywords.push(searchKeywordToAdd);\n      this.jobModel.searchKeywordToAdd = \"\";\n    }\n  }\n\n  removeSearchKeyword(searchKeywordToDelete: string) {\n    this.jobModel.searchKeywords = this.jobModel.searchKeywords.filter(searchKeyword => searchKeyword != searchKeywordToDelete);\n  }\n\n  saveJob() {\n    this.alertifyService.confirm(\"Save Changes?\", \"Do you want to save the changes you made to your notification?\", () => {\n\n      let job: AddJobTO = new AddJobTO();\n      job.email = this.jobModel.email;\n      job.username = this.username;\n      job.searchKeywords = this.jobModel.searchKeywords;\n      job.frequency = this.selectedJob.getJobTO.frequency;\n      job.repositories = this.getSelectedRepositories();\n\n      this.jobService.updateJob(job).subscribe(result => {\n\n        if (result.status == 200) {\n\n          this.selectedJob.getJobTO.repositories = job.repositories;\n          this.selectedJob.getJobTO.email = job.email;\n          this.selectedJob.getJobTO.searchKeywords = job.searchKeywords;\n\n          this.alertifyService.success(\"Notification updated.\");\n\n        } else {\n          this.alertifyService.error(\"An error occured.\");\n\n        }\n\n        this.activeModal.close();\n      });\n\n    });\n  }\n  getSelectedRepositories(): string[] {\n    let selectedRepositories: string[] = [];\n    selectedRepositories = this.jobModel.repositoryTos.filter(repository => repository.selected === true).map(repository => repository.name);\n    return selectedRepositories;\n  }\n\n}\n","module.exports = \".question{\\n    display: flex;\\n    flex-direction: column ;\\n}\\n\\n.faq-main{\\n    padding-bottom: 20px;\\n}\"","module.exports = \"<app-nav-menu [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-nav-menu>\\n<div class=\\\"container faq-main\\\">\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n      <div class=\\\"card-title\\\">\\n\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\n\\n\\n        <h1 class =\\\"mb-3\\\"><strong>F</strong>requently <strong>A</strong>sked <strong>Q</strong>uestions</h1>\\n          \\n        <hr>\\n\\n      <div class=\\\"mt-3 question\\\">\\n        <h3>1. What is this all about?</h3>\\n        <p class=\\\"ml-1\\\">This service helps you not leaking any vulnerable information when pushing to public repos.</p>\\n      </div>\\n      <div class=\\\"question\\\">\\n        <h3>2. How does it work?</h3>\\n        <p class=\\\"ml-1\\\">The service either scans your repositories every x minutes or it creates a repositoryhook and checks your repository every time any changes happen.\\n          When one of the specied keywords is found, a notification gets sent to you either via E-Mail, WhatsApp or SMS.\\n          Mobile messages are sent using Twilio.\\n        </p>\\n      </div>\\n      <div class=\\\"question\\\">\\n        <h3>3. Why does the app need permissions for GitHub?</h3>\\n        <p class=\\\"ml-1\\\">Creating webhooks for repositories is only possible with full access to the account.\\n          Creating scheduled jobs only uses the public GitHub API and therefore is possible without full access.\\n        </p>\\n      </div>\\n      <div class=\\\"question\\\">\\n        <h3>4. Why is this shit so slow?</h3>\\n        <p class=\\\"ml-1\\\">It is hosted on a free heroku dyno.</p>\\n      </div>\\n      <div class=\\\"question\\\">\\n          <h3>5. Are you going to collect my data?</h3>\\n          <p class=\\\"ml-1\\\">Yes.<br>You can get a full dump of your data on the <a [routerLink]='[\\\"/settings\\\"]'>settings</a> page.</p>\\n        </div>\\n\\n    </div>\\n  \\n  </div></div>\\n  </div>\\n</div>\\n<app-footer></app-footer>\"","import { Component, OnInit } from '@angular/core';\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\n\n@Component({\n  selector: 'app-faq',\n  templateUrl: './faq.component.html',\n  styleUrls: ['./faq.component.css']\n})\nexport class FaqComponent implements OnInit {\n\n  isAuthenticated: boolean;\n    username: string;\n\n    constructor(private githubAuthService: GithubauthService) {\n    }\n\n\n    ngOnInit() {\n        this.loggedIn();\n    }\n\n    loggedIn() {\n        this.githubAuthService.isAuthenticated().subscribe(response => {\n            if (response.status == 200) {\n                this.isAuthenticated = true;\n                this.githubAuthService.getCurrentUser().subscribe(username => {\n                    this.username = username.username\n                });\n            }\n        });\n    }\n\n}\n","module.exports = \".footer {\\n    position: absolute;\\n    bottom: 0;\\n    width: 100%;\\n    /* Set the fixed height of the footer here */\\n    height: 60px;\\n    line-height: 60px; /* Vertically center the text there */\\n  }\"","module.exports = \"<footer class=\\\"footer bg-primary text-white\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-2\\\">\\n        <a [routerLink]='[\\\"/faq\\\"]' style=\\\"margin-left:1%;\\\">FAQ</a>\\n        <a [routerLink]='[\\\"/contact\\\"]' style=\\\"margin-left:5%;\\\">Contact</a>\\n      </div>\\n      <div class=\\\"col-7\\\">\\n      </div>\\n      <div class=\\\"col-3\\\" style=\\\"display: flex;align-items: center;\\\">\\n        <div class=\\\"input-group\\\">\\n          <input type=\\\"number\\\" min=\\\"1\\\" step=\\\"any\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"amount\\\" placeholder=\\\"0\\\">\\n          <div class=\\\"input-group-append\\\">\\n            <span class=\\\"input-group-text\\\">€</span>\\n          </div>\\n          <div class=\\\"input-group-append\\\">\\n            <button class=\\\"btn btn-outline-secondary\\\" type=\\\"button\\\" (click)=\\\"createDonation()\\\"><i class=\\\"fa fa-paypal\\\"></i> Donate</button>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n\\n  </div>\\n</footer>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { PaymentService } from '../service/payment/payment.service';\nimport { DOCUMENT } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  amount:number;\n\n  constructor(private paymentService:PaymentService, @Inject(DOCUMENT) private document: any) { }\n\n  ngOnInit() {\n  }\n\n  createDonation() {\n    this.paymentService.createPayment(this.amount).subscribe(redirectUrl => {\n      this.document.location.href = redirectUrl;\n    });\n  }\n\n}\n","module.exports = \".homeMain{\\n    padding-bottom: 20px;\\n}\\n.region{\\n    padding-top: 30px;\\n}\\n.rnCard{\\n    background-color: #c9c9c9;\\n  }\"","module.exports = \"<app-nav-menu [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-nav-menu>\\n<div class=\\\"container homeMain\\\">\\n    <div class=\\\"region\\\">\\n    <div class=\\\"jumbotron bg-primary text-white\\\" style=\\\"margin-bottom: -5px\\\">\\n        <h1 class=\\\"display-4\\\" *ngIf=\\\"isAuthenticated; else showNotAnonymousGreeting\\\">Hello, {{username}}!</h1>\\n        <ng-template #showNotAnonymousGreeting>\\n            <h1>Hello, there!</h1>\\n        </ng-template>\\n        <p class=\\\"lead\\\">Welcome to RepositoryObserver, a simple service to observe your github repositories.</p>\\n        <hr class=\\\"my-4 bg-white\\\">\\n        <!-- <p>RepositoryObserver was built using:</p>\\n        <ul>\\n            <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a\\n                    href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side\\n                code\\n            </li>\\n            <li><a href='https://angular.io/'>Angular</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a>\\n                for\\n                client-side code\\n            </li>\\n            <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\\n            <li><a href='http://font-awesome.com/'>Font Awesome</a> for icons</li>\\n        </ul> -->\\n                        <p>\\n                            <strong>RepositoryObserver</strong> offers a service to <code>observe</code> your\\n                            <code>repositories</code> for\\n                            accidentally leaked <code>vulnerable data</code> like passwords or api-keys.<br>\\n                            Simply authenticate with your Github account and select the <code>repositories</code> you\\n                            want to be\\n                            observed.<br>\\n                            The service allows you to specify search keywords and select the frequency of a search process.\\n                        </p>\\n            <button style=\\\"margin-bottom:-3%;\\\" *ngIf=\\\"!isAuthenticated\\\" type=\\\"button\\\" class=\\\"btn btn-success btn-lg\\\" (click)=\\\"login()\\\"><i class=\\\"fa fa-github\\\"></i> Sign Up</button>\\n                        \\n        <div>\\n        </div>\\n    </div>\\n</div>\\n    <div class=\\\"region\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-sm-6\\\">\\n                <div class=\\\"card border-0 mb-3 h-100\\\" >\\n                    <div class=\\\"card-body bg-success text-white\\\">\\n                        <h2 class=\\\"card-title\\\">RepositoryObserver</h2>\\n                        <p class=\\\"card-text\\\">\\n                            <strong>RepositoryObserver</strong> offers a service to observe your\\n                            <code>repositories</code> for\\n                            accidentally leaked <code>passwords</code>.<br>\\n                            Simply authenticate with your Github account and select the <code>repositories</code> you\\n                            want to be\\n                            observed.<br>\\n                            You can choose a frequency at which the scans are started:\\n                        </p>\\n                        <ul>\\n                            <li>15 minutes</li>\\n                            <li>30 minutes</li>\\n                            <li>1 hour</li>\\n                            <li>3 hours</li>\\n                            <li>12 hours</li>\\n                            <li>1 day</li>\\n                        </ul>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-sm-6\\\">\\n                <div class=\\\"card border-0 mb-3 h-100\\\">\\n                    <div class=\\\"card-body bg-primary text-white\\\">\\n                        <h2 class=\\\"card-title\\\">Inspect SourceCode</h2>\\n                        <p class=\\\"card-text\\\">This project is open source and its source code can be reviewed <a\\n                                href=\\\"https://github.com/MorrisMorrison/RepositoryObserver\\\">here</a></p>\\n                        <p>The Application stores only the username and repository names and accesses them through\\n                            Github's public API.\\n                        </p>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"region\\\">\\n            <app-subscription></app-subscription>\\n        </div>\\n    \\n\\n    <!-- <div class=\\\"region\\\">\\n        <app-add-notification [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-add-notification>\\n    </div> -->\\n\\n</div>\\n<app-footer></app-footer>\"","import { Component, Inject, ViewChild } from '@angular/core';\nimport { GithubauthService } from \"../service/githubauth/githubauth.service\";\nimport { Router } from '@angular/router';\nimport { DOCUMENT } from \"@angular/common\";\nimport { AddJobComponent } from '../add-job/add-job.component';\nimport { NavMenuComponent } from '../nav-menu/nav-menu.component';\nimport { AlertifyService } from '../service/alertify/alertify.service';\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n\n    @ViewChild(NavMenuComponent) navMenuComponent: NavMenuComponent;\n    @ViewChild(AddJobComponent) addJobComponent: AddJobComponent;\n\n    isAuthenticated: boolean;\n    username: string;\n\n    constructor(private githubAuthService: GithubauthService, @Inject(DOCUMENT) private document: any, @Inject('BASE_URL') private baseUrl: string, private alertifyService:AlertifyService) {\n    }\n\n    ngOnInit() {\n        this.loggedIn();\n    }\n\n    loggedIn() {\n        this.githubAuthService.isAuthenticated().subscribe(response => {\n            if (response.status == 200) {\n                this.isAuthenticated = true;\n                this.githubAuthService.getCurrentUser().subscribe(username => {\n                    this.username = username.username\n                });\n            }\n        });\n    }\n\n    login() {\n            this.document.location.href =  this.baseUrl + \"api/auth/login\";\n    }\n}\n\n","module.exports = \".notificationsMain{\\n    padding-top: 10px;\\n    padding-bottom: 20px;\\n}\\n\\n.button-group{\\n    display:flex; justify-content:flex-end;\\n}\"","module.exports = \"<app-nav-menu [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-nav-menu>\\n<div class=\\\"container jobsMain\\\">\\n    <div class=\\\"card border-0\\\">\\n        <div class=\\\"card-header ro-card-header\\\">\\n            <span>\\n                <i class=\\\"fa fa-th-list\\\"></i>\\n                <h5>My Notifications</h5>\\n            </span>\\n            <a data-toggle=\\\"collapse\\\" href=\\\"#isCollapsedJobs\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\"\\n                aria-controls=\\\"isCollapsedJobs\\\">\\n                <i class=\\\"fa fa-chevron-down \\\"></i>\\n            </a>\\n        </div>\\n        <div class=\\\"card-body collapse show\\\" id=\\\"isCollapsedJobs\\\">\\n            <p class=\\\"card-text\\\">You can only have one NotificationTask per Frequency, so your maximum number of tasks\\n                equals the maximum number\\n                of\\n                frequencies available.</p>\\n            <div *ngIf=\\\"jobs.length < 1\\\">\\n                <p class=\\\"text-info\\\">You haven't created any jobs yet.</p>\\n            </div>\\n            <div *ngIf=\\\"jobs.length > 0\\\">\\n                <table class=\\\"table table-sm table-hover\\\">\\n                    <caption class=\\\"text-secondary\\\"> See results below by clicking on a row.</caption>\\n                    <thead class=\\\"thead bg-success text-white\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">Select</th>\\n                            <th scope=\\\"col\\\">#</th>\\n                            <th scope=\\\"col\\\">EMail</th>\\n                            <th scope=\\\"col\\\">Frequency</th>\\n                            <th scope=\\\"col\\\">Repositories</th>\\n                            <th scope=\\\"col\\\">Search Keywords</th>\\n                            <th scope=\\\"col\\\">Last Executed</th>\\n                            <th scope=\\\"col\\\">Status</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr *ngFor=\\\"let job of jobs; let i = index\\\" [attr.data-index]=\\\"i\\\"\\n                            (click)=\\\"getJobResults(job.getJobTO.frequency)\\\">\\n                            <td>\\n                                <input id=\\\"test\\\" name=\\\"{{job.getJobTO.id}}\\\" type=\\\"checkbox\\\"\\n                                    value=\\\"{{job.getJobTO.id}}\\\" [(ngModel)]=\\\"job.selected\\\">\\n                                <label for=\\\"test\\\"></label>\\n                            </td>\\n                            <td scope=\\\"row\\\">{{i+1}}</td>\\n                            <td>{{job.getJobTO.email}}</td>\\n                            <td>{{job.getJobTO.frequency}} minutes</td>\\n                            <td>\\n                                <ul>\\n                                    <li *ngFor=\\\"let repository of job.getJobTO.repositories\\\">\\n                                        {{repository}}</li>\\n                                </ul>\\n                            </td>\\n                            <td>\\n                                <ul>\\n                                    <li *ngFor=\\\"let searchKeyword of job.getJobTO.searchKeywords\\\">\\n                                        {{searchKeyword}}</li>\\n                                </ul>\\n                            </td>\\n                            <td *ngIf=\\\"job.getJobTO.status != 'INIT'; else showNever\\\">\\n                                {{job.getJobTO.lastExecutedAt | date:'dd.MM.yyyy HH:mm'}}</td>\\n                            <ng-template #showNever>\\n                                <td>Never</td>\\n                            </ng-template>\\n                            <td>{{job.getJobTO.status}}</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n                <button style=\\\"margin-right: 1%; width:10%;\\\" type=\\\"button\\\" class=\\\"btn btn-success\\\"\\n                    (click)=\\\"editJob()\\\">Edit</button>\\n                <button type=\\\"button\\\" style=\\\"width:10%;\\\" (click)=\\\"deleteJobs()\\\"\\n                    class=\\\"btn btn-info\\\">Delete</button>\\n            </div>\\n        </div>\\n    </div>\\n    <div *ngIf=\\\"jobs.length > 0\\\" class=\\\"region\\\">\\n        <div class=\\\"card border-0\\\">\\n            <div class=\\\"card-header ro-card-header\\\">\\n                <span>\\n                    <i class=\\\"fa fa-columns\\\"></i>\\n                    <h5>Results</h5>\\n                </span>\\n                <a data-toggle=\\\"collapse\\\" href=\\\"#collapseResults\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseResults\\\">\\n                    <i class=\\\"fa fa-chevron-down \\\"></i>\\n                </a>\\n            </div>\\n            <div class=\\\"card-body collapse show\\\" id=\\\"collapseResults\\\">\\n                <p class=\\\"card-text\\\">All results for a selected Task are provided below.\\n                </p>\\n                <div *ngIf=\\\"jobResultTos === null\\\">\\n                    <p class=\\\"text-info\\\">No results found for the selected NotificationTask.</p>\\n                </div>\\n                <table style=\\\"table-layout: fixed; width:100%\\\" *ngIf=\\\"jobResultTos.length > 0\\\" id=\\\"resultTable\\\"\\n                    class=\\\"table table-sm table-hover\\\">\\n                    <caption class=\\\"text-secondary\\\"> See details by clicking on a row.</caption>\\n                    <thead class=\\\"thead table-success\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\">#</th>\\n                            <th scope=\\\"col\\\">RepositoryName</th>\\n                            <th scope=\\\"col\\\">Name</th>\\n                            <th scope=\\\"col\\\">Path</th>\\n                            <th scope=\\\"col\\\">Url</th>\\n                            <th scope=\\\"col\\\">CreatedAt</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr (click)=\\\"collapseControl[key] = !collapseControl[key]\\\"\\n                            [attr.aria-expanded]=\\\"!collapseControl[key]\\\" aria-controls=\\\"key\\\"\\n                            *ngFor=\\\"let key of keys; let i = index\\\" [attr.data-index]=\\\"i\\\">\\n                            <td>#</td>\\n                            <td>{{jobResults[key][0].repositoryName}}</td>\\n                            <td>{{jobResults[key][0].name}}</td>\\n                            <td>{{jobResults[key][0].path}}</td>\\n                            <td><a href=\\\"{{jobResults[key][0].url}}\\\">Go to GitHub</a></td>\\n                            <td>{{jobResults[key][0].createdAt | date:'dd.MM.yyyy HH:mm'}}</td>\\n                        </tr>\\n                        <ng-template ngFor let-key [ngForOf]=\\\"keys\\\" let-keyIndex=\\\"index\\\">\\n                            <ng-template ngFor let-result [ngForOf]=\\\"jobResults[key]\\\" let-resultIndex=\\\"index\\\">\\n                                <tr [ngbCollapse]=\\\"collapseControl[key]\\\">\\n                                    <td>{{resultIndex+1}}</td>\\n                                    <td>{{result.repositoryName}}</td>\\n                                    <td>{{result.name}}</td>\\n                                    <td>{{result.path}}</td>\\n                                    <td><a href=\\\"{{result.url}}\\\">Go to GitHub</a></td>\\n                                    <td>{{result.createdAt | date:'dd.MM.yyyy HH:mm'}}</td>\\n                                </tr>\\n                            </ng-template>\\n                        </ng-template>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </div>\\n\\n    </div>\\n    <div class=\\\"region\\\">\\n        <app-add-job [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"\\n            (jobCreated)=\\\"jobCreated($event)\\\"></app-add-job>\\n    </div>\\n</div>\\n<app-footer></app-footer>\"","import { Component, OnInit } from '@angular/core';\nimport { JobService } from \"../service/job/job.service\";\nimport { GetJobTO, Job, AddJobTO, JobResultTO } from \"../dto/jobTO\";\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\nimport { AlertifyService } from '../service/alertify/alertify.service';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { RepositoryTO } from '../dto/repositoryTO';\nimport { forEach } from '@angular/router/src/utils/collection';\nimport { EditJobComponent } from '../edit-job/edit-job.component';\nimport { DatePipe } from '@angular/common';\n\n\n@Component({\n  selector: 'app-jobs',\n  templateUrl: './jobs.component.html',\n  styleUrls: ['./jobs.component.css'],\n  providers: [DatePipe]\n})\nexport class JobsComponent implements OnInit {\n\n  jobs: Job[] = [];\n  jobResults: { [key: string]: JobResultTO[]; } = {};\n  jobTos: GetJobTO[] = [];\n  keys: string[] = [];\n  jobResultTos: JobResultTO[] = [];\n  selectedJob: Job;\n  username: string;\n  isAuthenticated: boolean;\n  collapseControl: { [key: string]: boolean;} = {};\n  public isCollapsedJobs:boolean = false;\n\n  constructor(private jobService: JobService,\n    private githubAuthService: GithubauthService,\n    private alertifyService: AlertifyService,\n    private modalService: NgbModal) { }\n\n  ngOnInit() {\n    this.loggedIn();\n  }\n\n  loggedIn() {\n    this.githubAuthService.isAuthenticated().subscribe(response => {\n      if (response.status == 200) {\n        this.isAuthenticated = true;\n        this.githubAuthService.getCurrentUser().subscribe(currentUser => {\n          this.username = currentUser.username;\n        });\n        this.initData();\n      }\n    });\n  }\n\n  initData(){\n    this.getAllJobs();\n  }\n\n  getAllJobs() {\n    this.jobService.getJobs().subscribe(jobTos => {\n      this.jobTos = jobTos;\n      this.jobTos.forEach(jobTO => {\n        this.jobs.push(new Job(jobTO, false))\n      })\n      if (this.jobs.length >= 1){\n        this.getJobResults(this.jobs[0].getJobTO.frequency);\n      }    \n    })\n  }\n\n  getJobResults(frequency: number){\n    this.jobService.getJobResults(frequency).subscribe(jobResultsTos => {\n      this.jobResultTos = jobResultsTos;\n      if(this.jobResultTos== null){\n        this.jobResultTos = [];\n      }\n      this.jobResultTos.forEach(resultTO => {\n        if (this.jobResults[resultTO.name + \"|\" + resultTO.path] == null || this.jobResults[resultTO.name + \"|\" + resultTO.path].length < 1){\n          let results :JobResultTO[] = [];\n          results.push(resultTO);\n          this.jobResults[resultTO.name + \"|\" + resultTO.path]= results;\n          this.keys.push(resultTO.name + \"|\" + resultTO.path);\n          this.collapseControl[resultTO.name + \"|\" + resultTO.path]  = true;\n        }else{\n          this.jobResults[resultTO.name + \"|\" + resultTO.path].push(resultTO);\n        }\n      })\n      console.log(this.keys);\n    });\n  }\n\n  deleteJobs() {\n    this.alertifyService.confirm(\"Delete Notification\", \"Are you sure you want to delete this notification?\", () => {\n      let selectedJobs = this.getSelectedJobs();\n      selectedJobs.forEach(selectedJob => {\n        this.jobService.deleteJob(selectedJob.getJobTO.frequency).subscribe(result => {\n          if (result.status == 200){\n            this.jobs.splice(this.jobs.indexOf(selectedJob));\n            this.alertifyService.success(\"Notification deleted.\");\n          }else{\n            this.alertifyService.error(\"An error occured.\");\n          }\n        });\n      });\n    });\n  }\n\n  editJob() {\n    // const modalRef = this.modalService.open(EditJobComponent, { size: 'lg' });\n    const modalRef = this.modalService.open(EditJobComponent);\n    \n    modalRef.componentInstance.selectedJob = this.getSelectedJob();\n    modalRef.componentInstance.username = this.username;\n  }\n\n  getSelectedJobs(): Job[] {\n    return this.jobs.filter(notification => notification.selected == true);\n  }\n\n  getSelectedJob(): Job {\n    let selectedJobs: Job[] = this.getSelectedJobs();\n    if (selectedJobs != null) {\n      this.selectedJob = selectedJobs[0];\n      return this.selectedJob;\n    }\n  }\n\n  jobCreated(jobCreated: boolean) {\n    if (jobCreated == true) {\n      this.jobs = [];\n      this.getAllJobs();\n    }\n  }\n\n  uncheckJobs() {\n    this.jobs.forEach(job => {\n      job.selected = false;\n    })\n  }\n}\n","export class BillingAddressModel{\n    firstName: string;\n    lastName: string;\n    eMail: string;\n    address:string;\n    addressAddition:string;\n    country:string;\n    city:string;\n    postalCode:number;\n}","export class ContactModel{\n\n    public name:string =\"\";\n    public email:string =\"\";\n    public subject:string =\"\";\n    public message:string =\"\";\n\n}","import { RepositoryTO } from \"../dto/repositoryTO\";\n\nexport class AddJobModel{\n    public email: string;\n    public repositories: string[] = [];\n    public repositoryTos: RepositoryTO[] = [];\n    public frequencies: number[] = [];\n    public selectedFrequency: number;\n    public commonKeywords: string[] = [];\n    public searchKeywords: string[] = [];\n    public searchKeywordToAdd: string;\n    public smsNotificationEnabled: boolean;\n    public whatsappNotificationEnabled: boolean = false;\n    public emailNotificationEnabled: boolean = false;\n    public phoneNumber: string = \"\";\n    public schedulerEnabled: boolean = true;\n\n    constructor(){\n\n    }\n}","module.exports = \"a.navbar-brand {\\n  white-space: normal;\\n  text-align: center;\\n  word-break: break-all;\\n}\\n\\nhtml {\\n  font-size: 14px;\\n}\\n\\n@media (min-width: 768px) {\\n  html {\\n    font-size: 16px;\\n  }\\n}\\n\\n.box-shadow {\\n  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);\\n}\\n\"","module.exports = \"<header>\\n  <nav class='navbar navbar-expand-sm navbar-toggleable-sm bg-primary box-shadow mb-3'>\\n    <div class=\\\"container\\\">\\n      <a class=\\\"navbar-brand text-white\\\" [routerLink]='[\\\"/\\\"]'><i class=\\\"fa fa-search\\\"></i> RepositoryObserver</a>\\n      <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse\\\" aria-label=\\\"Toggle navigation\\\"\\n        [attr.aria-expanded]=\\\"isExpanded\\\" (click)=\\\"toggle()\\\">\\n        <span class=\\\"navbar-toggler-icon\\\"></span>\\n      </button>\\n      <div class=\\\"navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse\\\" [ngClass]='{\\\"show\\\": isExpanded}'>\\n        <ul class=\\\"navbar-nav flex-grow\\\">\\n          <li class=\\\"nav-item\\\" [routerLinkActive]='[\\\"link-active\\\"]' [routerLinkActiveOptions]='{ exact: true }'>\\n            <a class=\\\"nav-link text-white\\\" [routerLink]='[\\\"/\\\"]'><i class=\\\"fa fa-home\\\"></i> Home</a>\\n          </li>\\n          <li *ngIf=\\\"isAuthenticated\\\" class=\\\"nav-item\\\" [routerLinkActive]='[\\\"link-active\\\"]'>\\n            <a class=\\\"nav-link text-white\\\" [routerLink]='[\\\"/notifications\\\"]'><i class=\\\"fa fa-th-list\\\"></i> My Notifications</a>\\n          </li>\\n          <li *ngIf=\\\"!isAuthenticated\\\" class=\\\"nav-item\\\">\\n            <button class=\\\"btn btn-link\\\" (click)=\\\"login()\\\"><i class=\\\"fa fa-github\\\"></i> Sign In</button>\\n          </li>\\n          <li *ngIf=\\\"isAuthenticated\\\"  class=\\\"nav-item dropdown\\\">\\n            <a class=\\\"nav-link dropdown-toggle\\\"  href=\\\"\\\" id=\\\"navbarDropdown\\\" role=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">\\n              <i class=\\\"fa fa-github\\\"></i> {{username}}\\n            </a>\\n            <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"navbarDropdown\\\">\\n              <a class=\\\"btn btn-link\\\" [routerLink]='[\\\"/payments\\\"]'><i class=\\\"fa fa-dollar\\\"></i> Payments</a>\\n              <a class=\\\"btn btn-link\\\" [routerLink]='[\\\"/settings\\\"]'><i class=\\\"fa fa-cog\\\"></i> Settings</a>\\n              <div class=\\\"dropdown-divider\\\"></div>\\n              <button class=\\\"btn btn-link\\\" (click)=\\\"logout()\\\"><i class=\\\"fa fa-sign-out\\\"></i> Logout</button>\\n            </div>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </nav>\\n</header>\\n\\n\"","import { Component, Input, Inject } from '@angular/core';\nimport { GithubauthService } from \"../service/githubauth/githubauth.service\";\nimport { UserTO } from \"../dto/userTO\";\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { AlertifyService } from '../service/alertify/alertify.service';\nimport { Messages } from '../messages';\n\n@Component({\n  selector: 'app-nav-menu',\n  templateUrl: './nav-menu.component.html',\n  styleUrls: ['./nav-menu.component.css']\n})\nexport class NavMenuComponent {\n\n  isExpanded = false;\n\n  constructor(private githubAuthService: GithubauthService, @Inject(DOCUMENT) private document: any, private router: Router, private alertifyService: AlertifyService ,@Inject('BASE_URL') private baseUrl: string) {\n  }\n  @Input() isAuthenticated: boolean;\n  @Input() username: string;\n\n  ngOnInit() {\n    this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n  }\n\n  collapse() {\n    this.isExpanded = false;\n  }\n\n  toggle() {\n    this.isExpanded = !this.isExpanded;\n  }\n\n  logout() {\n    this.githubAuthService.logout().subscribe(response => {\n      this.router.navigate(['home']);\n      this.alertifyService.success(\"Logged out.\");\n    });\n  }\n\n  login() {\n    \n    this.document.location.href = this.baseUrl + \"api/auth/login\";\n}\n\n\n}\n","module.exports = \".payment-details-item{\\n    display:flex;\\n    flex-direction: column;\\n}\"","module.exports = \"<div class=\\\"modal-header\\\">\\n  <h4 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\"><i class=\\\"fa fa-info\\\"></i><span class=\\\"ml-1\\\">View Payment</span></h4>\\n  <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"activeModal.dismiss('Cross click')\\\">\\n    <span aria-hidden=\\\"true\\\">&times;</span>\\n  </button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12 order-md-1\\\">\\n        <h4 class=\\\"mb-3\\\"><i class=\\\"fa fa-dollar\\\"></i> General</h4>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-4 mb-3 payment-details-item\\\">\\n                <span>Payment Type</span>\\n                <span><i class=\\\"fa fa-paypal\\\"></i> {{payment.paymentType}}</span>\\n              </div>\\n              <div class=\\\"col-md-4 mb-3 payment-details-item\\\">\\n                  <span>Amount</span>\\n                  <span>{{payment.amount}} €</span>\\n                </div>\\n              <div class=\\\"col-md-4 mb-3 payment-details-item\\\">\\n                <span>Date</span>\\n                <span>{{payment.paymentDate | date:'dd.MM.yyyy HH:mm'}}</span>\\n              </div>\\n          </div>\\n      </div>\\n    </div>\\n    <hr>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12 order-md-1\\\">\\n        <h4 class=\\\"mb-3\\\"><i class=\\\"fa fa-address-card\\\"></i> Billing Address</h4>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6 mb-3 payment-details-item\\\">\\n            <span>First Name</span>\\n            <span>{{payment.billingAddress.firstName}}</span>\\n          </div>\\n          <div class=\\\"col-md-6 mb-3 payment-details-item\\\">\\n            <span >Last Name</span>\\n            <span>{{payment.billingAddress.lastName}}</span>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n\\n          <div class=\\\"col mb-3 payment-details-item\\\">\\n            <span>E-Mail</span>\\n            <span id=\\\"email\\\">{{payment.billingAddress.eMail}}</span>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col mb-3 payment-details-item\\\">\\n            <span >Address </span>\\n            <span>{{payment.billingAddress.address}}</span>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col mb-3 payment-details-item\\\">\\n            <span >Address 2</span>\\n            <span>{{payment.billingAddress.addressAddition}}</span>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-4 mb-3 payment-details-item\\\">\\n            <span >Country</span>\\n            <span>{{payment.billingAddress.country}}</span>\\n          </div>\\n          <div class=\\\"col-md-4 mb-3 payment-details-item\\\">\\n            <span >City</span>\\n            <span>{{payment.billingAddress.city}}</span>\\n          </div>\\n          <div class=\\\"col-md-4 mb-3 payment-details-item\\\">\\n            <span >Zip</span>\\n            <span>{{payment.billingAddress.postalCode}}</span>\\n\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n  <button type=\\\"button\\\" ngbAutofocus class=\\\"btn btn-outline-dark\\\" (click)=\\\"activeModal.close('Ok click')\\\">Go\\n    Back</button>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Payment } from '../dto/subscriptionTO';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-payment-details',\n  templateUrl: './payment-details.component.html',\n  styleUrls: ['./payment-details.component.css']\n})\nexport class PaymentDetailsComponent implements OnInit {\n\n  @Input() payment: Payment;\n\n  constructor(public activeModal: NgbActiveModal) { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".paymentsMain{\\n    padding-bottom: 20px;\\n}\\n.region{\\n    padding-top: 20px;\\n    padding-bottom: 10px;\\n}\\n.order-card {\\n    color: #fff;\\n}\\n.bg-c-blue {\\n    background: linear-gradient(45deg,#4099ff,#73b4ff);\\n}\\n.bg-c-green {\\n    background: linear-gradient(45deg,#2ed8b6,#59e0c5);\\n}\\n.bg-c-yellow {\\n    background: linear-gradient(45deg,#FFB64D,#ffcb80);\\n}\\n.bg-c-pink {\\n    background: linear-gradient(45deg,#FF5370,#ff869a);\\n}\\n.card .card-block {\\n    padding: 25px;\\n}\\n.order-card i {\\n    font-size: 26px;\\n}\\n.order-card:hover{\\n    -webkit-filter: brightness(120%);\\n            filter: brightness(120%)\\n}\\n.f-left {\\n    float: left;\\n}\\n.f-right {\\n    float: right;\\n}\\n    \\n\"","module.exports = \"<app-nav-menu [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-nav-menu>\\n<div class=\\\"container paymentsMain\\\">\\n    <div class=\\\"region\\\">\\n        <div class=\\\"card border-0\\\">\\n            <div class=\\\"card-header ro-card-header\\\">\\n                <span>\\n                    <i class=\\\"fa fa-credit-card\\\"></i>\\n                    <h5>My Premium Plan</h5>\\n                </span>\\n                <a data-toggle=\\\"collapse\\\" href=\\\"#collapsePremiumPlan\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapsePremiumPlan\\\">\\n                    <i class=\\\"fa fa-chevron-down \\\"></i>\\n                </a>\\n            </div>\\n            <div class=\\\"card-body collapse show\\\" id=\\\"collapsePremiumPlan\\\">\\n                <div class=\\\"row\\\" *ngIf=\\\"subscription != null\\\">\\n                    <!-- https://www.bootdey.com/snippets/view/Gradients-dashboard-cards#css -->\\n                    <div class=\\\"col-md-4 col-xl-4\\\">\\n                        <div class=\\\"card bg-primary order-card\\\">\\n                            <div class=\\\"card-block\\\">\\n                                <h6 class=\\\"m-b-20\\\">PremiumPlan</h6>\\n                                <h2 class=\\\"text-right\\\"><i\\n                                        class=\\\"fa fa-star f-left\\\"></i><span>{{subscription.premiumPlan.name}}</span>\\n                                </h2>\\n                                <p class=\\\"m-b-0\\\">Payment Method<span\\n                                        class=\\\"f-right\\\">{{subscription.premiumPlan.payments[0].paymentType}}</span></p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-md-4 col-xl-4\\\">\\n                        <div class=\\\"card bg-info order-card\\\">\\n                            <div class=\\\"card-block\\\">\\n                                <h6 class=\\\"m-b-20\\\">Last Payed</h6>\\n                                <h2 class=\\\"text-right\\\"><i\\n                                        class=\\\"fa fa-calendar f-left\\\"></i><span>{{subscription.premiumPlan.buyingDate | date:'dd.MM.yyyy'}}</span>\\n                                </h2>\\n                                <p class=\\\"m-b-0\\\">Buying Date<span\\n                                        class=\\\"f-right\\\">{{subscription.premiumPlan.buyingDate | date:'dd.MM.yyyy'}}</span>\\n                                </p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"col-md-4 col-xl-4\\\">\\n                        <div *ngIf=\\\"subscription.active\\\"\\n                            class=\\\"card bg-success mb-3 order-card\\\">\\n                            <div  class=\\\"card-block\\\">\\n                                <h6 class=\\\"m-b-20\\\">Status</h6>\\n                                <h2 class=\\\"text-right\\\"><i class=\\\"fa fa-check f-left\\\"></i><span>Active</span></h2>\\n                                <p class=\\\"m-b-0\\\">Expires<span class=\\\"f-right\\\">12 months</span></p>\\n                            </div>\\n                        </div>\\n\\n                        <div *ngIf=\\\"!subscription.active\\\" class=\\\"card bg-danger order-card\\\">\\n                            <div class=\\\"card-block\\\">\\n                                <h6 class=\\\"m-b-20\\\">Status</h6>\\n                                <h2 class=\\\"text-right\\\"><i class=\\\"fa fa-times f-left\\\"></i><span>Inactive</span></h2>\\n                                <p class=\\\"m-b-0\\\">Expires<span class=\\\"f-right\\\">Expired</span></p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <div *ngIf=\\\"subscription == null\\\">\\n                    <p class=\\\"text-info\\\">You haven't bought any premium plans yet.</p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div *ngIf=\\\"subscription != null\\\" class=\\\"region\\\">\\n        <div class=\\\"card border-0\\\">\\n            <div class=\\\"card-header ro-card-header\\\">\\n                <span>\\n\\n                    <i class=\\\"fa fa-dollar\\\"></i>\\n                    <h5 style=\\\"margin-bottom:-0.4%;\\\">My Payments</h5>\\n                </span>\\n                <a data-toggle=\\\"collapse\\\" href=\\\"#collapsePayments\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapsePayments\\\">\\n                    <i class=\\\"fa fa-chevron-down \\\"></i>\\n                </a>\\n            </div>\\n            <div class=\\\"card-body collapse show\\\" id=\\\"collapsePayments\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12\\\">\\n\\n                        <div class=\\\"media  pt-3\\\"\\n                            *ngFor=\\\"let payment of subscription.premiumPlan.payments; let i = index\\\"\\n                            [attr.data-index]=\\\"i\\\">\\n                            <!-- <svg class=\\\"bd-placeholder-img mr-2 rounded\\\" width=\\\"32\\\" height=\\\"32\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMidYMid slice\\\" focusable=\\\"false\\\" role=\\\"img\\\" aria-label=\\\"Placeholder: 32x32\\\"><title>Placeholder</title><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#007bff\\\"></rect><text x=\\\"50%\\\" y=\\\"50%\\\" fill=\\\"#007bff\\\" dy=\\\".3em\\\">32x32</text></svg> -->\\n                            <span class=\\\"mr-2\\\" width=\\\"32\\\" height=\\\"32\\\"><i class=\\\"fa fa-paypal\\\"></i></span>\\n                            <div class=\\\"media-body pb-3 mb-0 lh-125 border-bottom border-gray\\\">\\n                                <div class=\\\"text-muted d-flex justify-content-between align-items-center w-100\\\">\\n                                    <strong class=\\\"text-gray-dark\\\">{{payment.paymentType}}</strong>\\n                                    <a id=\\\"payment_dropdown_{{i}}\\\" href=\\\"#\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\"\\n                                        aria-expanded=\\\"false\\\"><i class=\\\"fa fa-ellipsis-v\\\"></i></a>\\n                                    <div class=\\\"dropdown-menu\\\">\\n                                        <!-- <a class=\\\"dropdown-item\\\" href=\\\"#\\\" (click)=\\\"deletePayment(payment)\\\"><i class=\\\"fa fa-trash\\\" ></i> <span style=\\\"padding-left:10%\\\">Delete</span></a> -->\\n                                        <a class=\\\"dropdown-item\\\" (click)=\\\"viewPaymentDetails(payment)\\\"><i\\n                                                class=\\\"fa fa-info-circle\\\"></i><span\\n                                                style=\\\"padding-left:10%\\\">Details</span></a>\\n                                        <a class=\\\"dropdown-item\\\" [routerLink]='[\\\"/contact\\\"]' style=\\\"color:black\\\"><i\\n                                                class=\\\"fa fa-question\\\"></i><span\\n                                                style=\\\"padding-left:10%\\\">Support</span></a>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\" text-muted d-flex justify-content-between align-items-center w-100\\\">\\n                                    <span class=\\\"d-block\\\">{{payment.amount}} €</span>\\n                                    <span class=\\\"d-block\\\">{{payment.paymentDate | date:'dd.MM.yyyy HH:mm'}}</span>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"region\\\">\\n        <div class=\\\"card border-0\\\">\\n            <div class=\\\"card-header ro-card-header\\\">\\n                <span>\\n                    <i class=\\\"fa fa-heart\\\"></i>\\n                    <h5>My Donations</h5>\\n\\n                </span>\\n                <a data-toggle=\\\"collapse\\\" href=\\\"#collapseDonations\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\"\\n                    aria-controls=\\\"collapseDonations\\\">\\n                    <i class=\\\"fa fa-chevron-down \\\"></i>\\n                </a>\\n            </div>\\n            <div class=\\\"card-body collapse show\\\" id=\\\"collapseDonations\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-12\\\">\\n                        <div class=\\\"media  pt-3 data-row\\\" *ngFor=\\\"let donation of donations; let i = index\\\"\\n                            [attr.data-index]=\\\"i\\\">\\n                            <!-- <svg class=\\\"bd-placeholder-img mr-2 rounded\\\" width=\\\"32\\\" height=\\\"32\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMidYMid slice\\\" focusable=\\\"false\\\" role=\\\"img\\\" aria-label=\\\"Placeholder: 32x32\\\"><title>Placeholder</title><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#007bff\\\"></rect><text x=\\\"50%\\\" y=\\\"50%\\\" fill=\\\"#007bff\\\" dy=\\\".3em\\\">32x32</text></svg> -->\\n                            <span class=\\\"mr-2\\\" width=\\\"32\\\" height=\\\"32\\\"><i class=\\\"fa fa-paypal\\\"></i></span>\\n                            <div class=\\\"media-body pb-3 mb-0 lh-125 border-bottom border-gray\\\">\\n                                <div class=\\\"text-muted d-flex justify-content-between align-items-center w-100\\\">\\n                                    <strong class=\\\"text-gray-dark\\\">{{donation.paymentType}}</strong>\\n                                    <a id=\\\"donation_dropdown_{{i}}\\\" href=\\\"#\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\"\\n                                        aria-expanded=\\\"false\\\"><i class=\\\"fa fa-ellipsis-v\\\"></i></a>\\n                                    <div class=\\\"dropdown-menu\\\">\\n                                        <!-- <a class=\\\"dropdown-item\\\" href=\\\"#\\\" (click)=\\\"deletePayment(payment)\\\"><i class=\\\"fa fa-trash\\\" ></i> <span style=\\\"padding-left:10%\\\">Delete</span></a> -->\\n                                        <a class=\\\"dropdown-item\\\" [routerLink]='[\\\"/contact\\\"]' style=\\\"color:black\\\"><i\\n                                                class=\\\"fa fa-question\\\"></i><span\\n                                                style=\\\"padding-left:10%\\\">Support</span></a>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\" text-muted d-flex justify-content-between align-items-center w-100\\\">\\n                                    <span class=\\\"d-block\\\">{{donation.amount}} €</span>\\n                                    <span class=\\\"d-block\\\">{{donation.createdAt | date:'dd.MM.yyyy HH:mm'}}</span>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div *ngIf=\\\"donations.length < 1\\\">\\n                    <p class=\\\"text-primary\\\">You haven't created any donations yet.</p>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n<app-footer></app-footer>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\nimport { PaymentService } from '../service/payment/payment.service';\nimport { Subscription, Payment } from '../dto/subscriptionTO';\nimport { Donation } from '../dto/donationTO';\nimport { DatePipe, DOCUMENT } from '@angular/common';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { EditJobComponent } from '../edit-job/edit-job.component';\nimport { PaymentDetailsComponent } from '../payment-details/payment-details.component';\nimport { CachedResourceLoader } from '@angular/platform-browser-dynamic/src/resource_loader/resource_loader_cache';\nimport { ThrowStmt } from '@angular/compiler';\n\n@Component({\n  selector: 'app-payments',\n  templateUrl: './payments.component.html',\n  styleUrls: ['./payments.component.css'],\n  providers: [DatePipe]\n})\nexport class PaymentsComponent implements OnInit {\n\n  \n  username: string;\n  isAuthenticated: boolean;\n  subscription:Subscription;\n  donations:Donation[] = [];\n  changeText = {\n    changeText: false\n  }\n\n  constructor(private githubAuthService: GithubauthService, private paymentService: PaymentService, private modalService: NgbModal, @Inject(DOCUMENT) document) { }\n\n  ngOnInit() {\n    this.loggedIn();\n  }\n\n\n  loggedIn() {\n    this.githubAuthService.isAuthenticated().subscribe(response => {\n      if (response.status == 200) {\n        this.isAuthenticated = true;\n        this.githubAuthService.getCurrentUser().subscribe(currentUser => {\n          this.username = currentUser.username;\n        });\n        this.getAllPayments();\n      }\n    });\n\n  }\n\n  getAllPayments(){\n    this.paymentService.getAllSubscriptions().subscribe(subscription => {\n      this.subscription = subscription;\n\n    });\n    this.paymentService.getAllDonations().subscribe(donations => {\n      this.donations = donations;\n    });\n  }\n\n  viewPaymentDetails(payment: Payment){\n      const modalRef = this.modalService.open(PaymentDetailsComponent);\n      modalRef.componentInstance.payment = payment;\n  }\n\n}\n\n","import { Injectable } from '@angular/core';\ndeclare let alertify: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertifyService {\n\n  constructor() {\n\n  }\n\n  confirm(title: string, message: string, okCallback: () => any) {\n    alertify.confirm(message, title, function (e) {\n      if (e) {\n        okCallback();\n      } else {\n      }\n    },  function (e) {\n    });\n  }\n\n  success(message: string) {\n    alertify.success(message);\n  }\n\n  error(message: string) {\n    alertify.error(message);\n  }\n\n  warning(message: string) {\n    alertify.warning(message);\n  }\n\n  message(message: string) {\n    alertify.message(message);\n  }\n\n\n\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddJobTO } from 'src/app/dto/jobTO';\nimport { HttpResponse, HttpClient } from '@angular/common/http';\nimport { AddContactTO } from 'src/app/dto/contactTO';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n  public baseUrl;\n  public httpClient:HttpClient;\n  \n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n      this.httpClient = http;\n      this.baseUrl = baseUrl;\n  }\n\n  addContact(contact:AddContactTO):Observable<HttpResponse<string>>{\n      return this.httpClient.post<string>(this.baseUrl + \"api/contact/createcontact\", contact, {observe: 'response'});\n  }\n}\n","import {HttpClient, HttpHeaders, HttpResponse} from \"@angular/common/http\";\nimport {Observable} from \"rxjs/index\";\nimport {UserTO} from \"../../dto/userTO\";\nimport {Inject, Injectable} from \"@angular/core\";\n\nconst httpOptions = {\n    headers: new HttpHeaders({ 'Accept': 'application/json', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Access-Control-Allow-Methods':'POST, GET, OPTIONS, DELETE, PUT', 'Access-Control-Allow-Headers': \"X-Requested-With, Content-Type, Origin, Authorization, Accept, Client-Security-Token, Accept-Encoding\"})\n};\n// const headers = new HttpHeaders({ 'Accept': 'application/json', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Access-Control-Allow-Methods':'POST, GET, OPTIONS, DELETE, PUT', 'Access-Control-Allow-Headers': \"X-Requested-With, Content-Type, Origin, Authorization, Accept, Client-Security-Token, Accept-Encoding\"});\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class GithubauthService {\n\n    public apiUrl = \"api/auth/login\";\n    public baseUrl;\n    public httpClient:HttpClient;\n    // public headers = new HttpHeaders({ 'Accept': 'application/json', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Access-Control-Allow-Methods':'POST, GET, OPTIONS, DELETE, PUT', 'Access-Control-Allow-Headers': \"X-Requested-With, Content-Type, Origin, Authorization, Accept, Client-Security-Token, Accept-Encoding\"});\n\n\n    constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n        this.httpClient = http;\n        this.baseUrl = baseUrl;\n    }\n\n    login():Observable<HttpResponse<string>>{\n        return this.httpClient.get<string>(this.baseUrl + this.apiUrl, {observe: 'response', responseType: 'text' as 'json'});\n    }\n\n    logout(){\n        return this.httpClient.get<void>(this.baseUrl + \"api/auth/logout\",  {observe: 'response'});\n    }\n    \n    isAuthenticated(){\n        return this.httpClient.get<void>(this.baseUrl + \"api/auth/isauthenticated\",  {observe: 'response'});\n    }\n\n    alreadyCreated(){\n        return this.httpClient.get<void>(this.baseUrl + \"api/auth/alreadycreated\",  {observe: 'response'});\n    }\n    \n    getCurrentUser():Observable<UserTO>{\n        return this.httpClient.get<UserTO>(this.baseUrl + \"api/auth/getcurrentuser\");\n    }\n    getCurrentUsersRepositories():Observable<string[]>{\n        return this.httpClient.get<string[]>(this.baseUrl + \"api/auth/getcurrentusersrepositories\");\n    }\n}\n","import {Inject, Injectable} from \"@angular/core\";\nimport {HttpClient, HttpResponse} from \"@angular/common/http\";\nimport {Observable} from \"rxjs/index\";\nimport {GetJobTO, AddJobTO, UpdateJobTO, JobResultTO} from \"../../dto/jobTO\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JobService {\n\n    public baseUrl;\n    public httpClient:HttpClient;\n    \n    constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n        this.httpClient = http;\n        this.baseUrl = baseUrl;\n    }\n\n    getFrequencies():Observable<number[]>{\n        return this.httpClient.get<number[]>(this.baseUrl + \"api/frequency/getfrequencies\");\n    }\n    \n    createJob(job:AddJobTO):Observable<HttpResponse<string>>{\n        return this.httpClient.post<string>(this.baseUrl + \"api/job/createjob\", job, {observe: 'response'});\n    }\n\n    getJobs():Observable<GetJobTO[]>{\n        return this.httpClient.get<GetJobTO[]>(this.baseUrl + \"api/job/getalljobs\");\n    }\n    \n    deleteJob(frequency: number):Observable<HttpResponse<string>>{\n        return this.httpClient.delete<string>(this.baseUrl + \"api/job/deletejob?frequency=\" + frequency, {observe: 'response'});\n    }\n\n    getCommonKeywords():Observable<string[]>{\n        return this.httpClient.get<string[]>(this.baseUrl + \"api/job/getcommonkeywords\");\n    }\n\n    updateJob(job:UpdateJobTO):Observable<HttpResponse<string>>{\n        return this.httpClient.put<string>(this.baseUrl +\"api/job/updatejob\", job, {observe: 'response'});\n    }\n\n    getJobResults(frequency:number):Observable<JobResultTO[]>{\n        return this.httpClient.get<JobResultTO[]>(this.baseUrl + \"api/job/getjobresults?frequency=\" + frequency);\n    }\n\n}\n\n\n\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Subscription, CreateSusbcriptionTO, BillingAddressTO } from 'src/app/dto/subscriptionTO';\nimport { Donation } from 'src/app/dto/donationTO';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n\n  public baseUrl;\n  public httpClient: HttpClient;\n\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n    this.httpClient = http;\n    this.baseUrl = baseUrl;\n  }\n\n  createPayment(amount: number):Observable<string>{\n    return this.httpClient.post<string>(this.baseUrl +\"api/payment/createpayment\", amount, {responseType: 'text' as 'json'});\n  }\n\n  createSubscription(createSubscriptionTO: CreateSusbcriptionTO):Observable<string>{\n    return this.httpClient.post<string>(this.baseUrl + \"api/payment/createsubscription\", createSubscriptionTO, {responseType: 'text' as 'json'})\n  }\n\n  getSubscription():Observable<Subscription>{\n    return this.httpClient.get<Subscription>(this.baseUrl + \"api/payment/getsubscription\");\n  }\n\n  getAllSubscriptions():Observable<Subscription>{\n    return this.httpClient.get<Subscription>(this.baseUrl + \"api/payment/getallsubscriptions\");\n  }\n\n  getAllDonations():Observable<Donation[]>{\n    return this.httpClient.get<Donation[]>(this.baseUrl + \"api/payment/getalldonations\");\n  }\n\n  cancelSubscription():Observable<HttpResponse<string>>{\n    return this.httpClient.put<string>(this.baseUrl +\"api/payment/cancelsubscription\",\"\", {observe: 'response'});\n  }\n\n  updateBillingAddress(billingAddressTO: BillingAddressTO):Observable<HttpResponse<string>>{\n    return this.httpClient.put<string>(this.baseUrl +\"api/payment/updatebillingaddress\", billingAddressTO, {observe: 'response'});\n  }\n\n}\n","module.exports = \".settings-main{\\n    padding-bottom: 20px;\\n}\"","module.exports = \"<app-nav-menu [isAuthenticated]=\\\"isAuthenticated\\\" [username]=\\\"username\\\"></app-nav-menu>\\n\\n<div class=\\\"container settings-main\\\">\\n\\n\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n      <div class=\\\"card-title\\\">\\n        <h1 class=\\\"mb-3\\\">Settings</h1>\\n      </div>\\n      <hr>\\n      <div class=\\\"row\\\">\\n        <!-- nav -->\\n        <div class=\\\"col-md-3\\\">\\n          <div class=\\\"list-group\\\">\\n            <a *ngIf=\\\"accountViewActive\\\" class=\\\"list-group-item list-group-item-action active text-white\\\"\\n              (click)=\\\"accountViewActive=true\\\">\\n              Account\\n            </a>\\n            <a *ngIf=\\\"!accountViewActive\\\" class=\\\"list-group-item list-group-item-action\\\"\\n              (click)=\\\"accountViewActive=true\\\">\\n              Account\\n            </a>\\n            <a *ngIf=\\\"!accountViewActive\\\" class=\\\"list-group-item list-group-item-action active text-white\\\"\\n              (click)=\\\"accountViewActive=false\\\">Subscription</a>\\n            <a *ngIf=\\\"accountViewActive\\\" class=\\\"list-group-item list-group-item-action\\\"\\n              (click)=\\\"accountViewActive=false\\\">Subscription</a>\\n          </div>\\n        </div>\\n\\n        <!-- content -->\\n        <div class=\\\"col-md-9\\\">\\n          <div *ngIf=\\\"accountViewActive\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-6 mb-3\\\">\\n                  <span>Connect to another GitHub account</span>\\n              </div>\\n              <div class=\\\"col-md-6 mb-3\\\">\\n                  <button class=\\\"ml-3 btn btn-primary\\\">\\n                      Connect\\n                    </button>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <span>Get data dump</span>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <button class=\\\"ml-3 btn btn-secondary\\\">\\n                        Download\\n                      </button>\\n                  </div>\\n            </div>\\n            \\n\\n\\n          </div>\\n          <div *ngIf=\\\"!accountViewActive\\\">\\n              <h4 class=\\\"mb-3\\\">Susbcription</h4>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-6 mb-3\\\">\\n                <span><strong>Cancel Subscription</strong></span>\\n              </div>\\n              <div class =\\\"col-md-6 mb-3\\\">\\n                <button class=\\\"btn btn-danger\\\" (click)=\\\"cancelSubscription()\\\">Cancel</button>\\n              </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6 mb-3\\\">\\n                  <span><strong>Change Payment Method</strong></span>\\n                </div>\\n                <div class =\\\"col-md-6 mb-3\\\">\\n                  <button class=\\\"btn btn-warning\\\">Change</button>\\n                </div>\\n              </div>\\n            <hr>\\n\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-12 order-md-1\\\">\\n                <h4 class=\\\"mb-3\\\">Billing Address</h4>\\n                <form class=\\\"needs-validation\\\" novalidate>\\n                  <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-6 mb-3\\\">\\n                      <label for=\\\"firstName\\\">First Name</label>\\n                      <input [(ngModel)]=\\\"subscription.billingAddress.firstName\\\" type=\\\"text\\\" class=\\\"form-control\\\"\\n                        id=\\\"firstName\\\" name=\\\"firstName\\\" placeholder=\\\"\\\" value=\\\"{{subscription.billingAddress.firstName}}\\\"\\n                        required>\\n                      <div class=\\\"invalid-feedback\\\">\\n                        Valid first name is required.\\n                      </div>\\n                    </div>\\n                    <div class=\\\"col-md-6 mb-3\\\">\\n                      <label for=\\\"lastName\\\">Last Name</label>\\n                      <input [(ngModel)]=\\\"subscription.billingAddress.lastName\\\" type=\\\"text\\\" class=\\\"form-control\\\"\\n                        id=\\\"lastName\\\" name=\\\"lastName\\\" placeholder=\\\"\\\" value=\\\"{{subscription.billingAddress.lastName}}\\\"\\n                        required>\\n                      <div class=\\\"invalid-feedback\\\">\\n                        Valid last name is required.\\n                      </div>\\n                    </div>\\n                  </div>\\n\\n                  <div class=\\\"mb-3\\\">\\n                    <label for=\\\"email\\\">E-Mail</label>\\n                    <div class=\\\"input-group\\\">\\n                      <div class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">@</span>\\n                      </div>\\n                      <input [(ngModel)]=\\\"subscription.billingAddress.eMail\\\" type=\\\"email\\\" class=\\\"form-control\\\"\\n                        id=\\\"email\\\" name=\\\"email\\\" value=\\\"{{subscription.billingAddress.eMail}}\\\"\\n                        placeholder=\\\"you@example.com\\\" required>\\n                      <div class=\\\"invalid-feedback\\\" style=\\\"width: 100%;\\\">\\n                        Please enter a valid email address for shipping updates.\\n                      </div>\\n                    </div>\\n                  </div>\\n\\n                  <div class=\\\"mb-3\\\">\\n                    <label for=\\\"address\\\">Address</label>\\n                    <input [(ngModel)]=\\\"subscription.billingAddress.address\\\" type=\\\"text\\\" class=\\\"form-control\\\"\\n                      id=\\\"address\\\" name=\\\"address\\\" value=\\\"{{subscription.billingAddress.address}}\\\"\\n                      placeholder=\\\"1234 Main St\\\" required>\\n                    <div class=\\\"invalid-feedback\\\">\\n                      Please enter your shipping address.\\n                    </div>\\n                  </div>\\n\\n                  <div class=\\\"mb-3\\\">\\n                    <label for=\\\"address2\\\">Address 2 <span class=\\\"text-muted\\\">(Optional)</span></label>\\n                    <input [(ngModel)]=\\\"subscription.billingAddress.addressAddition\\\" type=\\\"text\\\" class=\\\"form-control\\\"\\n                      id=\\\"address2\\\" name=\\\"addressAddition\\\" value=\\\"{{subscription.billingAddress.addressAddition}}\\\"\\n                      placeholder=\\\"Apartment or suite\\\">\\n                  </div>\\n\\n                  <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-4 mb-3\\\">\\n                      <label for=\\\"country\\\">Country</label>\\n                      <select [(ngModel)]=\\\"subscription.billingAddress.country\\\" class=\\\"custom-select d-block w-100\\\"\\n                        id=\\\"country\\\" name=\\\"country\\\" required>\\n                        <option value=\\\"{{subscription.billingAddress.country}}\\\">Choose...</option>\\n                        <option>Germany</option>\\n                      </select>\\n                      <div class=\\\"invalid-feedback\\\">\\n                        Please select a valid country.\\n                      </div>\\n                    </div>\\n                    <div class=\\\"col-md-4 mb-3\\\">\\n                      <label for=\\\"state\\\">City</label>\\n                      <input [(ngModel)]=\\\"subscription.billingAddress.city\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"city\\\"\\n                        name=\\\"city\\\" value=\\\"{{subscription.billingAddress.city}}\\\" placeholder=\\\"\\\" required>\\n                      <div class=\\\"invalid-feedback\\\">\\n                        Please provide a valid state.\\n                      </div>\\n                    </div>\\n                    <div class=\\\"col-md-4 mb-3\\\">\\n                      <label for=\\\"zip\\\">Zip</label>\\n                      <input [(ngModel)]=\\\"subscription.billingAddress.postalCode\\\" type=\\\"text\\\" class=\\\"form-control\\\"\\n                        id=\\\"zip\\\" name=\\\"zip\\\" value=\\\"{{subscription.billingAddress.postalCode}}\\\" placeholder=\\\"\\\" required>\\n                      <div class=\\\"invalid-feedback\\\">\\n                        Zip code required.\\n                      </div>\\n                    </div>\\n\\n\\n                  </div>\\n                  <hr class=\\\"mb-4\\\">\\n\\n                  <div class=\\\"row\\\" style=\\\"display:flex; flex-direction: column; align-items:center;\\\">\\n                    <button class=\\\"btn btn-primary btn-lg btn-block\\\" style=\\\"width:80%;\\\" (click)=\\\"save()\\\" type=\\\"button\\\"><i\\n                        class=\\\"fa fa-save\\\"></i> <span class=\\\"ml-3\\\">Save</span></button>\\n                  </div>\\n                </form>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n</div>\\n\\n\\n<app-footer></app-footer>\"","import { Component, OnInit } from '@angular/core';\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\nimport { PaymentService } from '../service/payment/payment.service';\nimport { Subscription } from '../dto/subscriptionTO';\nimport { AlertifyService } from '../service/alertify/alertify.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\nexport class SettingsComponent implements OnInit {\n\n  accountViewActive:boolean=true;\n  isAuthenticated: boolean;\n  username: string;\n  subscription:Subscription;\n\n  constructor(private paymentService:PaymentService,private githubAuthService: GithubauthService , private alertifySerivce: AlertifyService) {\n  }\n\n  ngOnInit() {\n      this.loggedIn();\n  }\n\n  loggedIn() {\n      this.githubAuthService.isAuthenticated().subscribe(response => {\n          if (response.status == 200) {\n              this.isAuthenticated = true;\n              this.githubAuthService.getCurrentUser().subscribe(username => {\n                  this.username = username.username\n              });\n              this.getAllPayments();\n          }\n      });\n  }\n\n  getAllPayments(){\n    this.paymentService.getAllSubscriptions().subscribe(subscription => {\n      this.subscription = subscription;\n  });\n  }\n\n  cancelSubscription(){\n    this.alertifySerivce.confirm(\"Cancel Subscription?\", \"Do you really want to cancel your subscription?\", () => {\n      this.paymentService.cancelSubscription().subscribe(response => {\n        if (response.status == 200) {\n          this.alertifySerivce.success(\"Subscription successfully cancelled.\");\n      }else{\n        this.alertifySerivce.error(\"An error occurred. Please contact our support team if this error persists.\");\n      }\n      });\n    });\n  }\n\n  save(){\n    console.log(this.subscription.billingAddress);\n    this.paymentService.updateBillingAddress(this.subscription.billingAddress).subscribe(response => {\n      if (response.status == 200) {\n        this.alertifySerivce.success(\"Billing Address successfully updated.\");\n        this.getAllPayments();\n    }else{\n      this.alertifySerivce.error(\"An error occurred. Please contact our support team if this error persists.\");\n    }\n    })\n  }\n\n}\n","module.exports = \".subscriptionMain{\\n    padding-bottom: 10px;\\n}\"","module.exports = \"<div class=\\\"subscriptionMain\\\">\\n  <div class=\\\"card border-0 mb-3\\\">\\n    <div class=\\\"card-body\\\">\\n      <h1 class=\\\"card-title\\\">Subscriptions</h1>\\n      <p>All non free subscriptions lead to a sandbox paypal account, no real product is sold.</p>\\n      <div class=\\\"card-deck mb-3 text-center\\\">\\n        <div class=\\\"card mb-4 shadow-sm\\\">\\n          <div class=\\\"card-header\\\">\\n            <h4 class=\\\"my-0 font-weight-normal\\\">Free</h4>\\n          </div>\\n          <div class=\\\"card-body\\\">\\n            <h1 class=\\\"card-title pricing-card-title\\\">$0 <small class=\\\"text-muted\\\">/ mo</small></h1>\\n            <ul class=\\\"list-unstyled mt-3 mb-4\\\">\\n              <li>1 user only</li>\\n              <li>1 notification per frequency</li>\\n              <li>Email support</li>\\n              <li>Nothing else</li>\\n              <li></li>\\n            </ul>\\n            <button type=\\\"button\\\" class=\\\"btn btn-lg btn-block btn-outline-success\\\" (click)=\\\"login()\\\">Sign up for\\n              free</button>\\n          </div>\\n        </div>\\n        <div class=\\\"card mb-4 shadow-sm\\\">\\n          <div class=\\\"card-header\\\">\\n            <h4 class=\\\"my-0 font-weight-normal\\\">Pro</h4>\\n          </div>\\n          <div class=\\\"card-body\\\">\\n            <h1 class=\\\"card-title pricing-card-title\\\">$1 <small class=\\\"text-muted\\\">/ mo</small></h1>\\n            <ul class=\\\"list-unstyled mt-3 mb-4\\\">\\n              <li>3 users included</li>\\n              <li>2 notifications per frequency</li>\\n              <li>Priority email support</li>\\n              <li>Help center access</li>\\n            </ul>\\n            <button type=\\\"button\\\" class=\\\"btn btn-lg btn-block btn-primary\\\" [routerLink]='[\\\"/checkout\\\"]'><i\\n                class=\\\"fa fa-paypal\\\"></i> Buy now</button>\\n\\n          </div>\\n        </div>\\n        <div class=\\\"card mb-4 shadow-sm\\\">\\n          <div class=\\\"card-header\\\">\\n            <h4 class=\\\"my-0 font-weight-normal\\\">Enterprise</h4>\\n          </div>\\n          <div class=\\\"card-body\\\">\\n            <h1 class=\\\"card-title pricing-card-title\\\">$2 <small class=\\\"text-muted\\\">/ mo</small></h1>\\n            <ul class=\\\"list-unstyled mt-3 mb-4\\\">\\n              <li>unlimited users</li>\\n              <li>unlimited notifications</li>\\n              <li>Phone and email support</li>\\n              <li>Help center access</li>\\n            </ul>\\n            <button type=\\\"button\\\" class=\\\"btn btn-lg btn-block btn-success\\\" [routerLink]='[\\\"/contact\\\"]'><i\\n                class=\\\"fa fa-file-contract\\\"></i> Contact us</button>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { GithubauthService } from '../service/githubauth/githubauth.service';\nimport { DOCUMENT } from \"@angular/common\";\nimport { AlertifyService } from '../service/alertify/alertify.service';\nimport { PaymentService } from '../service/payment/payment.service';\n\n@Component({\n  selector: 'app-subscription',\n  templateUrl: './subscription.component.html',\n  styleUrls: ['./subscription.component.css']\n})\nexport class SubscriptionComponent implements OnInit {\n\n  private proSubscriptionPrice: number = 1;\n  private businessSubscriptionPrice: number = 2;\n\n  constructor(private githubAuthService: GithubauthService,\n    @Inject(DOCUMENT) private document: any,\n    private alertifyService: AlertifyService,\n    private paymentService: PaymentService,\n    @Inject('BASE_URL') private baseUrl: string) { }\n\n  ngOnInit() {\n  }\n\n  login() {\n    this.document.location.href = this.baseUrl + \"api/auth/login\";  \n  }\n\n\n\n\n  createProSubscription(){\n    this.createSubscription(this.proSubscriptionPrice);\n\n  }\n\n  createBusinessSubscription(){\n    this.createSubscription(this.businessSubscriptionPrice);\n  }\n\n  createSubscription(amount: number){\n    // this.paymentService.createSubscription(amount).subscribe(redirectUrl => {\n    //   this.document.location.href = redirectUrl;\n    // })\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nexport function getBaseUrl() {\n  return document.getElementsByTagName('base')[0].href;\n}\n\nconst providers = [\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\n];\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n"],"sourceRoot":""}