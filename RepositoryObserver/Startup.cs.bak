using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Claims;
using RepositoryNotifier.Middleware;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.OAuth;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SpaServices.AngularCli;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json.Linq;
using RepositoryNotifier.Constants;
using RepositoryNotifier.Persistence;
using RepositoryNotifier.Service;
using RepositoryNotifier.Service.Github;
using RepositoryNotifier.Service.Payment;
using RepositoryNotifier.Persistence.Subscription;
using RepositoryNotifier.Persistence.Job;
using RepositoryNotifier.JobScheduler;
using RepositoryNotifier.Service.Job;
using RepositoryNotifier.Service.Email;
using RepositoryNotifier.Service.SMS;

namespace RepositoryNotifier
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // https://docs.microsoft.com/de-de/aspnet/core/security/cors?view=aspnetcore-2.2
            // Add Cors before mvc
            // services.AddCors(options =>
            //     {
            //         options.AddPolicy("AllowDevOrigin",
            //         builder => builder.WithOrigins("https://github.com").AllowAnyHeader().AllowAnyMethod().AllowCredentials());
            //     });

            services.AddCors();
            services.AddMvc();

            services.AddHttpClient("HttpClientName", client => {
// code to configure headers etc..
            }).ConfigurePrimaryHttpMessageHandler(() => {
                var handler = new HttpClientHandler();
                    handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; };
                return handler;
            });
            // services.AddMvcCore()
            // services.AddApiExplorer();

            // https://www.jerriepelser.com/blog/authenticate-oauth-aspnet-core-2/
            services.AddAuthentication(p_options =>
                {
                    p_options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                    p_options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                    p_options.DefaultChallengeScheme = AuthenticationConstants.AUTHENTICATION_SCHEMA;
                })
                .AddCookie()
                .AddOAuth(AuthenticationConstants.AUTHENTICATION_SCHEMA, p_options =>
                {
                    p_options.ClientId = Configuration["GitHub:ClientId"];
                    p_options.ClientSecret = Configuration["GitHub:ClientSecret"];
                    p_options.CallbackPath = new PathString("/signup-github");

                    //https://cors-anywhere.herokuapp.com/
                    p_options.AuthorizationEndpoint = "https://github.com/login/oauth/authorize";
                    p_options.TokenEndpoint = "https://github.com/login/oauth/access_token";
                    p_options.UserInformationEndpoint = "https://api.github.com/user";
                    // p_options.ClaimsIssuer = "OAuth2-Github";

                    p_options.ClaimActions.MapJsonKey(ClaimTypes.NameIdentifier, "id");
                    p_options.ClaimActions.MapJsonKey(ClaimTypes.Name, "name");
                    // TODO email not working
                    p_options.ClaimActions.MapJsonKey(ClaimTypes.Email, "email");
                    p_options.ClaimActions.MapJsonKey("urn:github:login", "login");
                    p_options.ClaimActions.MapJsonKey("urn:github:url", "html_url");
                    p_options.ClaimActions.MapJsonKey("urn:github:avatar", "avatar_url");

                    p_options.Scope.Add("admin:repo_hook");

                    p_options.SaveTokens = true;

                    p_options.Events = new OAuthEvents
                    {

                        OnCreatingTicket = async context =>
                        {
                            var request =
                                new HttpRequestMessage(HttpMethod.Get, context.Options.UserInformationEndpoint);
                            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                            request.Headers.Authorization =
                                new AuthenticationHeaderValue("Bearer", context.AccessToken);

                            var response = await context.Backchannel.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, context.HttpContext.RequestAborted);
                            response.EnsureSuccessStatusCode();

                            var user = JObject.Parse(await response.Content.ReadAsStringAsync());

                            context.RunClaimActions(user);
                        }
                    };



                });

            services.AddSwaggerDocument();
            // Inject dependencies via constructor
            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
            services.AddSingleton<IGithubApiService, GithubApiService>();
            services.AddSingleton<IJobScheduler, JobScheduler.JobScheduler>();
            services.AddSingleton<IJobDao, JobDao>();
            services.AddSingleton<IJobService, JobService>();
            services.AddSingleton<IJobFrequencyService, JobFrequencyService>();
            services.AddSingleton<IPayPalPaymentService, PayPalPaymentService>();
            services.AddSingleton<ISubscriptionService, SubscriptionService>();
            services.AddSingleton<ISubscriptionDao, SubscriptionDao>();
            services.AddSingleton<IDonationService, DonationService>();
            services.AddSingleton<IDonationDao, DonationDao>();
            services.AddSingleton<IPremiumPlanService, PremiumPlanService>();
            services.AddSingleton<IDbConnectionProvider, DbConnectionProvider>();
            services.AddSingleton<IEmailService, EmailService>();
            services.AddSingleton<IMobileNotificationServiceProvider, TwilioMobileNotificationServiceProvider>();
            services.AddSingleton<IMobileNotificationService, MobileNotificationService>();
            services.AddSingleton<IContactDao, ContactDao>();
            services.AddSingleton<IContactService, ContactService>();

            // In production, the Angular files will be served from this directory
            services.AddSpaStaticFiles(configuration => { configuration.RootPath = "wwwroot"; });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
//                app.UseHsts();
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            // built in cors middleware doesnt work => no headers set 
            app.UseCors(options => options.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());

            // own middleware to force CORS headers
            // app.UseCorsMiddleware();

            // app.UseHttpsRedirection();
            app.UseAuthentication();

            app.UseDefaultFiles();
            app.UseStaticFiles();

            app.UseOpenApi();
            app.UseSwaggerUi3();

            // is used when spa is served by kestrel
            // // app.UseSpaStaticFiles();

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller}/{action=Index}/{id?}");
                // Uncomment if SPA needs to be served by kestrel
                // routes.MapSpaFallbackRoute(name: "spa-fallback", defaults: new { controller = "Fallback", action = "Index" });
            });

            app.UseSpa(spa =>
            {
                // To learn more about options for serving an Angular SPA from ASP.NET Core,
                // see https://go.microsoft.com/fwlink/?linkid=864501
                spa.Options.SourcePath = "ClientApp";
                if (env.IsDevelopment())
                {
                    spa.UseAngularCliServer(npmScript: "start");

                    // not used atm
                    // spa.UseProxyToSpaDevelopmentServer("http://localhost:4200");
                }
            });
        }
    }
}